(()=>{var t={9662:(t,r,n)=>{var e=n(614),o=n(6330),i=TypeError;t.exports=function(t){if(e(t))return t;throw i(o(t)+" is not a function")}},6077:(t,r,n)=>{var e=n(614),o=String,i=TypeError;t.exports=function(t){if("object"==typeof t||e(t))return t;throw i("Can't set "+o(t)+" as a prototype")}},1223:(t,r,n)=>{var e=n(5112),o=n(30),i=n(3070).f,a=e("unscopables"),c=Array.prototype;null==c[a]&&i(c,a,{configurable:!0,value:o(null)}),t.exports=function(t){c[a][t]=!0}},9670:(t,r,n)=>{var e=n(111),o=String,i=TypeError;t.exports=function(t){if(e(t))return t;throw i(o(t)+" is not an object")}},1318:(t,r,n)=>{var e=n(5656),o=n(1400),i=n(6244),a=function(t){return function(r,n,a){var c,s=e(r),u=i(s),f=o(a,u);if(t&&n!=n){for(;u>f;)if((c=s[f++])!=c)return!0}else for(;u>f;f++)if((t||f in s)&&s[f]===n)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},2092:(t,r,n)=>{var e=n(9974),o=n(1702),i=n(8361),a=n(7908),c=n(6244),s=n(5417),u=o([].push),f=function(t){var r=1==t,n=2==t,o=3==t,f=4==t,l=6==t,p=7==t,d=5==t||l;return function(v,A,g,h){for(var y,m,b=a(v),w=i(b),x=e(A,g),E=c(w),C=0,S=h||s,B=r?S(v,E):n||p?S(v,0):void 0;E>C;C++)if((d||C in w)&&(m=x(y=w[C],C,b),t))if(r)B[C]=m;else if(m)switch(t){case 3:return!0;case 5:return y;case 6:return C;case 2:u(B,y)}else switch(t){case 4:return!1;case 7:u(B,y)}return l?-1:o||f?f:B}};t.exports={forEach:f(0),map:f(1),filter:f(2),some:f(3),every:f(4),find:f(5),findIndex:f(6),filterReject:f(7)}},1589:(t,r,n)=>{var e=n(1400),o=n(6244),i=n(6135),a=Array,c=Math.max;t.exports=function(t,r,n){for(var s=o(t),u=e(r,s),f=e(void 0===n?s:n,s),l=a(c(f-u,0)),p=0;u<f;u++,p++)i(l,p,t[u]);return l.length=p,l}},206:(t,r,n)=>{var e=n(1702);t.exports=e([].slice)},7475:(t,r,n)=>{var e=n(3157),o=n(4411),i=n(111),a=n(5112)("species"),c=Array;t.exports=function(t){var r;return e(t)&&(r=t.constructor,(o(r)&&(r===c||e(r.prototype))||i(r)&&null===(r=r[a]))&&(r=void 0)),void 0===r?c:r}},5417:(t,r,n)=>{var e=n(7475);t.exports=function(t,r){return new(e(t))(0===r?0:r)}},4326:(t,r,n)=>{var e=n(1702),o=e({}.toString),i=e("".slice);t.exports=function(t){return i(o(t),8,-1)}},648:(t,r,n)=>{var e=n(1694),o=n(614),i=n(4326),a=n(5112)("toStringTag"),c=Object,s="Arguments"==i(function(){return arguments}());t.exports=e?i:function(t){var r,n,e;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,r){try{return t[r]}catch(t){}}(r=c(t),a))?n:s?i(r):"Object"==(e=i(r))&&o(r.callee)?"Arguments":e}},9920:(t,r,n)=>{var e=n(2597),o=n(3887),i=n(1236),a=n(3070);t.exports=function(t,r,n){for(var c=o(r),s=a.f,u=i.f,f=0;f<c.length;f++){var l=c[f];e(t,l)||n&&e(n,l)||s(t,l,u(r,l))}}},8544:(t,r,n)=>{var e=n(7293);t.exports=!e((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},6178:t=>{t.exports=function(t,r){return{value:t,done:r}}},8880:(t,r,n)=>{var e=n(9781),o=n(3070),i=n(9114);t.exports=e?function(t,r,n){return o.f(t,r,i(1,n))}:function(t,r,n){return t[r]=n,t}},9114:t=>{t.exports=function(t,r){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:r}}},6135:(t,r,n)=>{"use strict";var e=n(4948),o=n(3070),i=n(9114);t.exports=function(t,r,n){var a=e(r);a in t?o.f(t,a,i(0,n)):t[a]=n}},8709:(t,r,n)=>{"use strict";var e=n(9670),o=n(2140),i=TypeError;t.exports=function(t){if(e(this),"string"===t||"default"===t)t="string";else if("number"!==t)throw i("Incorrect hint");return o(this,t)}},7045:(t,r,n)=>{var e=n(6339),o=n(3070);t.exports=function(t,r,n){return n.get&&e(n.get,r,{getter:!0}),n.set&&e(n.set,r,{setter:!0}),o.f(t,r,n)}},8052:(t,r,n)=>{var e=n(614),o=n(3070),i=n(6339),a=n(3072);t.exports=function(t,r,n,c){c||(c={});var s=c.enumerable,u=void 0!==c.name?c.name:r;if(e(n)&&i(n,u,c),c.global)s?t[r]=n:a(r,n);else{try{c.unsafe?t[r]&&(s=!0):delete t[r]}catch(t){}s?t[r]=n:o.f(t,r,{value:n,enumerable:!1,configurable:!c.nonConfigurable,writable:!c.nonWritable})}return t}},3072:(t,r,n)=>{var e=n(7854),o=Object.defineProperty;t.exports=function(t,r){try{o(e,t,{value:r,configurable:!0,writable:!0})}catch(n){e[t]=r}return r}},9781:(t,r,n)=>{var e=n(7293);t.exports=!e((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},4154:t=>{var r="object"==typeof document&&document.all,n=void 0===r&&void 0!==r;t.exports={all:r,IS_HTMLDDA:n}},317:(t,r,n)=>{var e=n(7854),o=n(111),i=e.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},8324:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8509:(t,r,n)=>{var e=n(317)("span").classList,o=e&&e.constructor&&e.constructor.prototype;t.exports=o===Object.prototype?void 0:o},8113:t=>{t.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},7392:(t,r,n)=>{var e,o,i=n(7854),a=n(8113),c=i.process,s=i.Deno,u=c&&c.versions||s&&s.version,f=u&&u.v8;f&&(o=(e=f.split("."))[0]>0&&e[0]<4?1:+(e[0]+e[1])),!o&&a&&(!(e=a.match(/Edge\/(\d+)/))||e[1]>=74)&&(e=a.match(/Chrome\/(\d+)/))&&(o=+e[1]),t.exports=o},748:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(t,r,n)=>{var e=n(7854),o=n(1236).f,i=n(8880),a=n(8052),c=n(3072),s=n(9920),u=n(4705);t.exports=function(t,r){var n,f,l,p,d,v=t.target,A=t.global,g=t.stat;if(n=A?e:g?e[v]||c(v,{}):(e[v]||{}).prototype)for(f in r){if(p=r[f],l=t.dontCallGetSet?(d=o(n,f))&&d.value:n[f],!u(A?f:v+(g?".":"#")+f,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;s(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),a(n,f,p,t)}}},7293:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},2104:(t,r,n)=>{var e=n(4374),o=Function.prototype,i=o.apply,a=o.call;t.exports="object"==typeof Reflect&&Reflect.apply||(e?a.bind(i):function(){return a.apply(i,arguments)})},9974:(t,r,n)=>{var e=n(1470),o=n(9662),i=n(4374),a=e(e.bind);t.exports=function(t,r){return o(t),void 0===r?t:i?a(t,r):function(){return t.apply(r,arguments)}}},4374:(t,r,n)=>{var e=n(7293);t.exports=!e((function(){var t=function(){}.bind();return"function"!=typeof t||t.hasOwnProperty("prototype")}))},6916:(t,r,n)=>{var e=n(4374),o=Function.prototype.call;t.exports=e?o.bind(o):function(){return o.apply(o,arguments)}},6530:(t,r,n)=>{var e=n(9781),o=n(2597),i=Function.prototype,a=e&&Object.getOwnPropertyDescriptor,c=o(i,"name"),s=c&&"something"===function(){}.name,u=c&&(!e||e&&a(i,"name").configurable);t.exports={EXISTS:c,PROPER:s,CONFIGURABLE:u}},5668:(t,r,n)=>{var e=n(1702),o=n(9662);t.exports=function(t,r,n){try{return e(o(Object.getOwnPropertyDescriptor(t,r)[n]))}catch(t){}}},1470:(t,r,n)=>{var e=n(4326),o=n(1702);t.exports=function(t){if("Function"===e(t))return o(t)}},1702:(t,r,n)=>{var e=n(4374),o=Function.prototype,i=o.call,a=e&&o.bind.bind(i,i);t.exports=e?a:function(t){return function(){return i.apply(t,arguments)}}},5005:(t,r,n)=>{var e=n(7854),o=n(614);t.exports=function(t,r){return arguments.length<2?(n=e[t],o(n)?n:void 0):e[t]&&e[t][r];var n}},8044:(t,r,n)=>{var e=n(1702),o=n(3157),i=n(614),a=n(4326),c=n(1340),s=e([].push);t.exports=function(t){if(i(t))return t;if(o(t)){for(var r=t.length,n=[],e=0;e<r;e++){var u=t[e];"string"==typeof u?s(n,u):"number"!=typeof u&&"Number"!=a(u)&&"String"!=a(u)||s(n,c(u))}var f=n.length,l=!0;return function(t,r){if(l)return l=!1,r;if(o(this))return r;for(var e=0;e<f;e++)if(n[e]===t)return r}}}},8173:(t,r,n)=>{var e=n(9662),o=n(8554);t.exports=function(t,r){var n=t[r];return o(n)?void 0:e(n)}},7854:function(t,r,n){var e=function(t){return t&&t.Math==Math&&t};t.exports=e("object"==typeof globalThis&&globalThis)||e("object"==typeof window&&window)||e("object"==typeof self&&self)||e("object"==typeof n.g&&n.g)||function(){return this}()||this||Function("return this")()},2597:(t,r,n)=>{var e=n(1702),o=n(7908),i=e({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,r){return i(o(t),r)}},3501:t=>{t.exports={}},490:(t,r,n)=>{var e=n(5005);t.exports=e("document","documentElement")},4664:(t,r,n)=>{var e=n(9781),o=n(7293),i=n(317);t.exports=!e&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:(t,r,n)=>{var e=n(1702),o=n(7293),i=n(4326),a=Object,c=e("".split);t.exports=o((function(){return!a("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?c(t,""):a(t)}:a},9587:(t,r,n)=>{var e=n(614),o=n(111),i=n(7674);t.exports=function(t,r,n){var a,c;return i&&e(a=r.constructor)&&a!==n&&o(c=a.prototype)&&c!==n.prototype&&i(t,c),t}},2788:(t,r,n)=>{var e=n(1702),o=n(614),i=n(5465),a=e(Function.toString);o(i.inspectSource)||(i.inspectSource=function(t){return a(t)}),t.exports=i.inspectSource},9909:(t,r,n)=>{var e,o,i,a=n(4811),c=n(7854),s=n(111),u=n(8880),f=n(2597),l=n(5465),p=n(6200),d=n(3501),v="Object already initialized",A=c.TypeError,g=c.WeakMap;if(a||l.state){var h=l.state||(l.state=new g);h.get=h.get,h.has=h.has,h.set=h.set,e=function(t,r){if(h.has(t))throw A(v);return r.facade=t,h.set(t,r),r},o=function(t){return h.get(t)||{}},i=function(t){return h.has(t)}}else{var y=p("state");d[y]=!0,e=function(t,r){if(f(t,y))throw A(v);return r.facade=t,u(t,y,r),r},o=function(t){return f(t,y)?t[y]:{}},i=function(t){return f(t,y)}}t.exports={set:e,get:o,has:i,enforce:function(t){return i(t)?o(t):e(t,{})},getterFor:function(t){return function(r){var n;if(!s(r)||(n=o(r)).type!==t)throw A("Incompatible receiver, "+t+" required");return n}}}},3157:(t,r,n)=>{var e=n(4326);t.exports=Array.isArray||function(t){return"Array"==e(t)}},614:(t,r,n)=>{var e=n(4154),o=e.all;t.exports=e.IS_HTMLDDA?function(t){return"function"==typeof t||t===o}:function(t){return"function"==typeof t}},4411:(t,r,n)=>{var e=n(1702),o=n(7293),i=n(614),a=n(648),c=n(5005),s=n(2788),u=function(){},f=[],l=c("Reflect","construct"),p=/^\s*(?:class|function)\b/,d=e(p.exec),v=!p.exec(u),A=function(t){if(!i(t))return!1;try{return l(u,f,t),!0}catch(t){return!1}},g=function(t){if(!i(t))return!1;switch(a(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return v||!!d(p,s(t))}catch(t){return!0}};g.sham=!0,t.exports=!l||o((function(){var t;return A(A.call)||!A(Object)||!A((function(){t=!0}))||t}))?g:A},4705:(t,r,n)=>{var e=n(7293),o=n(614),i=/#|\.prototype\./,a=function(t,r){var n=s[c(t)];return n==f||n!=u&&(o(r)?e(r):!!r)},c=a.normalize=function(t){return String(t).replace(i,".").toLowerCase()},s=a.data={},u=a.NATIVE="N",f=a.POLYFILL="P";t.exports=a},8554:t=>{t.exports=function(t){return null==t}},111:(t,r,n)=>{var e=n(614),o=n(4154),i=o.all;t.exports=o.IS_HTMLDDA?function(t){return"object"==typeof t?null!==t:e(t)||t===i}:function(t){return"object"==typeof t?null!==t:e(t)}},1913:t=>{t.exports=!1},2190:(t,r,n)=>{var e=n(5005),o=n(614),i=n(7976),a=n(3307),c=Object;t.exports=a?function(t){return"symbol"==typeof t}:function(t){var r=e("Symbol");return o(r)&&i(r.prototype,c(t))}},3061:(t,r,n)=>{"use strict";var e=n(3383).IteratorPrototype,o=n(30),i=n(9114),a=n(8003),c=n(7497),s=function(){return this};t.exports=function(t,r,n,u){var f=r+" Iterator";return t.prototype=o(e,{next:i(+!u,n)}),a(t,f,!1,!0),c[f]=s,t}},1656:(t,r,n)=>{"use strict";var e=n(2109),o=n(6916),i=n(1913),a=n(6530),c=n(614),s=n(3061),u=n(9518),f=n(7674),l=n(8003),p=n(8880),d=n(8052),v=n(5112),A=n(7497),g=n(3383),h=a.PROPER,y=a.CONFIGURABLE,m=g.IteratorPrototype,b=g.BUGGY_SAFARI_ITERATORS,w=v("iterator"),x="keys",E="values",C="entries",S=function(){return this};t.exports=function(t,r,n,a,v,g,B){s(n,r,a);var _,O,j,T=function(t){if(t===v&&W)return W;if(!b&&t in k)return k[t];switch(t){case x:case E:case C:return function(){return new n(this,t)}}return function(){return new n(this)}},P=r+" Iterator",L=!1,k=t.prototype,I=k[w]||k["@@iterator"]||v&&k[v],W=!b&&I||T(v),F="Array"==r&&k.entries||I;if(F&&(_=u(F.call(new t)))!==Object.prototype&&_.next&&(i||u(_)===m||(f?f(_,m):c(_[w])||d(_,w,S)),l(_,P,!0,!0),i&&(A[P]=S)),h&&v==E&&I&&I.name!==E&&(!i&&y?p(k,"name",E):(L=!0,W=function(){return o(I,this)})),v)if(O={values:T(E),keys:g?W:T(x),entries:T(C)},B)for(j in O)(b||L||!(j in k))&&d(k,j,O[j]);else e({target:r,proto:!0,forced:b||L},O);return i&&!B||k[w]===W||d(k,w,W,{name:v}),A[r]=W,O}},3383:(t,r,n)=>{"use strict";var e,o,i,a=n(7293),c=n(614),s=n(111),u=n(30),f=n(9518),l=n(8052),p=n(5112),d=n(1913),v=p("iterator"),A=!1;[].keys&&("next"in(i=[].keys())?(o=f(f(i)))!==Object.prototype&&(e=o):A=!0),!s(e)||a((function(){var t={};return e[v].call(t)!==t}))?e={}:d&&(e=u(e)),c(e[v])||l(e,v,(function(){return this})),t.exports={IteratorPrototype:e,BUGGY_SAFARI_ITERATORS:A}},7497:t=>{t.exports={}},6244:(t,r,n)=>{var e=n(7466);t.exports=function(t){return e(t.length)}},6339:(t,r,n)=>{var e=n(1702),o=n(7293),i=n(614),a=n(2597),c=n(9781),s=n(6530).CONFIGURABLE,u=n(2788),f=n(9909),l=f.enforce,p=f.get,d=String,v=Object.defineProperty,A=e("".slice),g=e("".replace),h=e([].join),y=c&&!o((function(){return 8!==v((function(){}),"length",{value:8}).length})),m=String(String).split("String"),b=t.exports=function(t,r,n){"Symbol("===A(d(r),0,7)&&(r="["+g(d(r),/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(r="get "+r),n&&n.setter&&(r="set "+r),(!a(t,"name")||s&&t.name!==r)&&(c?v(t,"name",{value:r,configurable:!0}):t.name=r),y&&n&&a(n,"arity")&&t.length!==n.arity&&v(t,"length",{value:n.arity});try{n&&a(n,"constructor")&&n.constructor?c&&v(t,"prototype",{writable:!1}):t.prototype&&(t.prototype=void 0)}catch(t){}var e=l(t);return a(e,"source")||(e.source=h(m,"string"==typeof r?r:"")),t};Function.prototype.toString=b((function(){return i(this)&&p(this).source||u(this)}),"toString")},4758:t=>{var r=Math.ceil,n=Math.floor;t.exports=Math.trunc||function(t){var e=+t;return(e>0?n:r)(e)}},30:(t,r,n)=>{var e,o=n(9670),i=n(6048),a=n(748),c=n(3501),s=n(490),u=n(317),f=n(6200),l="prototype",p="script",d=f("IE_PROTO"),v=function(){},A=function(t){return"<"+p+">"+t+"</"+p+">"},g=function(t){t.write(A("")),t.close();var r=t.parentWindow.Object;return t=null,r},h=function(){try{e=new ActiveXObject("htmlfile")}catch(t){}var t,r,n;h="undefined"!=typeof document?document.domain&&e?g(e):(r=u("iframe"),n="java"+p+":",r.style.display="none",s.appendChild(r),r.src=String(n),(t=r.contentWindow.document).open(),t.write(A("document.F=Object")),t.close(),t.F):g(e);for(var o=a.length;o--;)delete h[l][a[o]];return h()};c[d]=!0,t.exports=Object.create||function(t,r){var n;return null!==t?(v[l]=o(t),n=new v,v[l]=null,n[d]=t):n=h(),void 0===r?n:i.f(n,r)}},6048:(t,r,n)=>{var e=n(9781),o=n(3353),i=n(3070),a=n(9670),c=n(5656),s=n(1956);r.f=e&&!o?Object.defineProperties:function(t,r){a(t);for(var n,e=c(r),o=s(r),u=o.length,f=0;u>f;)i.f(t,n=o[f++],e[n]);return t}},3070:(t,r,n)=>{var e=n(9781),o=n(4664),i=n(3353),a=n(9670),c=n(4948),s=TypeError,u=Object.defineProperty,f=Object.getOwnPropertyDescriptor,l="enumerable",p="configurable",d="writable";r.f=e?i?function(t,r,n){if(a(t),r=c(r),a(n),"function"==typeof t&&"prototype"===r&&"value"in n&&d in n&&!n[d]){var e=f(t,r);e&&e[d]&&(t[r]=n.value,n={configurable:p in n?n[p]:e[p],enumerable:l in n?n[l]:e[l],writable:!1})}return u(t,r,n)}:u:function(t,r,n){if(a(t),r=c(r),a(n),o)try{return u(t,r,n)}catch(t){}if("get"in n||"set"in n)throw s("Accessors not supported");return"value"in n&&(t[r]=n.value),t}},1236:(t,r,n)=>{var e=n(9781),o=n(6916),i=n(5296),a=n(9114),c=n(5656),s=n(4948),u=n(2597),f=n(4664),l=Object.getOwnPropertyDescriptor;r.f=e?l:function(t,r){if(t=c(t),r=s(r),f)try{return l(t,r)}catch(t){}if(u(t,r))return a(!o(i.f,t,r),t[r])}},1156:(t,r,n)=>{var e=n(4326),o=n(5656),i=n(8006).f,a=n(1589),c="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return c&&"Window"==e(t)?function(t){try{return i(t)}catch(t){return a(c)}}(t):i(o(t))}},8006:(t,r,n)=>{var e=n(6324),o=n(748).concat("length","prototype");r.f=Object.getOwnPropertyNames||function(t){return e(t,o)}},5181:(t,r)=>{r.f=Object.getOwnPropertySymbols},9518:(t,r,n)=>{var e=n(2597),o=n(614),i=n(7908),a=n(6200),c=n(8544),s=a("IE_PROTO"),u=Object,f=u.prototype;t.exports=c?u.getPrototypeOf:function(t){var r=i(t);if(e(r,s))return r[s];var n=r.constructor;return o(n)&&r instanceof n?n.prototype:r instanceof u?f:null}},7976:(t,r,n)=>{var e=n(1702);t.exports=e({}.isPrototypeOf)},6324:(t,r,n)=>{var e=n(1702),o=n(2597),i=n(5656),a=n(1318).indexOf,c=n(3501),s=e([].push);t.exports=function(t,r){var n,e=i(t),u=0,f=[];for(n in e)!o(c,n)&&o(e,n)&&s(f,n);for(;r.length>u;)o(e,n=r[u++])&&(~a(f,n)||s(f,n));return f}},1956:(t,r,n)=>{var e=n(6324),o=n(748);t.exports=Object.keys||function(t){return e(t,o)}},5296:(t,r)=>{"use strict";var n={}.propertyIsEnumerable,e=Object.getOwnPropertyDescriptor,o=e&&!n.call({1:2},1);r.f=o?function(t){var r=e(this,t);return!!r&&r.enumerable}:n},7674:(t,r,n)=>{var e=n(5668),o=n(9670),i=n(6077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,r=!1,n={};try{(t=e(Object.prototype,"__proto__","set"))(n,[]),r=n instanceof Array}catch(t){}return function(n,e){return o(n),i(e),r?t(n,e):n.__proto__=e,n}}():void 0)},288:(t,r,n)=>{"use strict";var e=n(1694),o=n(648);t.exports=e?{}.toString:function(){return"[object "+o(this)+"]"}},2140:(t,r,n)=>{var e=n(6916),o=n(614),i=n(111),a=TypeError;t.exports=function(t,r){var n,c;if("string"===r&&o(n=t.toString)&&!i(c=e(n,t)))return c;if(o(n=t.valueOf)&&!i(c=e(n,t)))return c;if("string"!==r&&o(n=t.toString)&&!i(c=e(n,t)))return c;throw a("Can't convert object to primitive value")}},3887:(t,r,n)=>{var e=n(5005),o=n(1702),i=n(8006),a=n(5181),c=n(9670),s=o([].concat);t.exports=e("Reflect","ownKeys")||function(t){var r=i.f(c(t)),n=a.f;return n?s(r,n(t)):r}},857:(t,r,n)=>{var e=n(7854);t.exports=e},4488:(t,r,n)=>{var e=n(8554),o=TypeError;t.exports=function(t){if(e(t))throw o("Can't call method on "+t);return t}},8003:(t,r,n)=>{var e=n(3070).f,o=n(2597),i=n(5112)("toStringTag");t.exports=function(t,r,n){t&&!n&&(t=t.prototype),t&&!o(t,i)&&e(t,i,{configurable:!0,value:r})}},6200:(t,r,n)=>{var e=n(2309),o=n(9711),i=e("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},5465:(t,r,n)=>{var e=n(7854),o=n(3072),i="__core-js_shared__",a=e[i]||o(i,{});t.exports=a},2309:(t,r,n)=>{var e=n(1913),o=n(5465);(t.exports=function(t,r){return o[t]||(o[t]=void 0!==r?r:{})})("versions",[]).push({version:"3.30.2",mode:e?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.30.2/LICENSE",source:"https://github.com/zloirock/core-js"})},8710:(t,r,n)=>{var e=n(1702),o=n(9303),i=n(1340),a=n(4488),c=e("".charAt),s=e("".charCodeAt),u=e("".slice),f=function(t){return function(r,n){var e,f,l=i(a(r)),p=o(n),d=l.length;return p<0||p>=d?t?"":void 0:(e=s(l,p))<55296||e>56319||p+1===d||(f=s(l,p+1))<56320||f>57343?t?c(l,p):e:t?u(l,p,p+2):f-56320+(e-55296<<10)+65536}};t.exports={codeAt:f(!1),charAt:f(!0)}},3111:(t,r,n)=>{var e=n(1702),o=n(4488),i=n(1340),a=n(1361),c=e("".replace),s=RegExp("^["+a+"]+"),u=RegExp("(^|[^"+a+"])["+a+"]+$"),f=function(t){return function(r){var n=i(o(r));return 1&t&&(n=c(n,s,"")),2&t&&(n=c(n,u,"$1")),n}};t.exports={start:f(1),end:f(2),trim:f(3)}},6293:(t,r,n)=>{var e=n(7392),o=n(7293),i=n(7854).String;t.exports=!!Object.getOwnPropertySymbols&&!o((function(){var t=Symbol();return!i(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&e&&e<41}))},6532:(t,r,n)=>{var e=n(6916),o=n(5005),i=n(5112),a=n(8052);t.exports=function(){var t=o("Symbol"),r=t&&t.prototype,n=r&&r.valueOf,c=i("toPrimitive");r&&!r[c]&&a(r,c,(function(t){return e(n,this)}),{arity:1})}},2015:(t,r,n)=>{var e=n(6293);t.exports=e&&!!Symbol.for&&!!Symbol.keyFor},863:(t,r,n)=>{var e=n(1702);t.exports=e(1..valueOf)},1400:(t,r,n)=>{var e=n(9303),o=Math.max,i=Math.min;t.exports=function(t,r){var n=e(t);return n<0?o(n+r,0):i(n,r)}},5656:(t,r,n)=>{var e=n(8361),o=n(4488);t.exports=function(t){return e(o(t))}},9303:(t,r,n)=>{var e=n(4758);t.exports=function(t){var r=+t;return r!=r||0===r?0:e(r)}},7466:(t,r,n)=>{var e=n(9303),o=Math.min;t.exports=function(t){return t>0?o(e(t),9007199254740991):0}},7908:(t,r,n)=>{var e=n(4488),o=Object;t.exports=function(t){return o(e(t))}},7593:(t,r,n)=>{var e=n(6916),o=n(111),i=n(2190),a=n(8173),c=n(2140),s=n(5112),u=TypeError,f=s("toPrimitive");t.exports=function(t,r){if(!o(t)||i(t))return t;var n,s=a(t,f);if(s){if(void 0===r&&(r="default"),n=e(s,t,r),!o(n)||i(n))return n;throw u("Can't convert object to primitive value")}return void 0===r&&(r="number"),c(t,r)}},4948:(t,r,n)=>{var e=n(7593),o=n(2190);t.exports=function(t){var r=e(t,"string");return o(r)?r:r+""}},1694:(t,r,n)=>{var e={};e[n(5112)("toStringTag")]="z",t.exports="[object z]"===String(e)},1340:(t,r,n)=>{var e=n(648),o=String;t.exports=function(t){if("Symbol"===e(t))throw TypeError("Cannot convert a Symbol value to a string");return o(t)}},6330:t=>{var r=String;t.exports=function(t){try{return r(t)}catch(t){return"Object"}}},9711:(t,r,n)=>{var e=n(1702),o=0,i=Math.random(),a=e(1..toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+a(++o+i,36)}},3307:(t,r,n)=>{var e=n(6293);t.exports=e&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3353:(t,r,n)=>{var e=n(9781),o=n(7293);t.exports=e&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},4811:(t,r,n)=>{var e=n(7854),o=n(614),i=e.WeakMap;t.exports=o(i)&&/native code/.test(String(i))},6800:(t,r,n)=>{var e=n(857),o=n(2597),i=n(6061),a=n(3070).f;t.exports=function(t){var r=e.Symbol||(e.Symbol={});o(r,t)||a(r,t,{value:i.f(t)})}},6061:(t,r,n)=>{var e=n(5112);r.f=e},5112:(t,r,n)=>{var e=n(7854),o=n(2309),i=n(2597),a=n(9711),c=n(6293),s=n(3307),u=e.Symbol,f=o("wks"),l=s?u.for||u:u&&u.withoutSetter||a;t.exports=function(t){return i(f,t)||(f[t]=c&&i(u,t)?u[t]:l("Symbol."+t)),f[t]}},1361:t=>{t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},6992:(t,r,n)=>{"use strict";var e=n(5656),o=n(1223),i=n(7497),a=n(9909),c=n(3070).f,s=n(1656),u=n(6178),f=n(1913),l=n(9781),p="Array Iterator",d=a.set,v=a.getterFor(p);t.exports=s(Array,"Array",(function(t,r){d(this,{type:p,target:e(t),index:0,kind:r})}),(function(){var t=v(this),r=t.target,n=t.kind,e=t.index++;return!r||e>=r.length?(t.target=void 0,u(void 0,!0)):u("keys"==n?e:"values"==n?r[e]:[e,r[e]],!1)}),"values");var A=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!f&&l&&"values"!==A.name)try{c(A,"name",{value:"values"})}catch(t){}},6078:(t,r,n)=>{var e=n(2597),o=n(8052),i=n(8709),a=n(5112)("toPrimitive"),c=Date.prototype;e(c,a)||o(c,a,i)},8862:(t,r,n)=>{var e=n(2109),o=n(5005),i=n(2104),a=n(6916),c=n(1702),s=n(7293),u=n(614),f=n(2190),l=n(206),p=n(8044),d=n(6293),v=String,A=o("JSON","stringify"),g=c(/./.exec),h=c("".charAt),y=c("".charCodeAt),m=c("".replace),b=c(1..toString),w=/[\uD800-\uDFFF]/g,x=/^[\uD800-\uDBFF]$/,E=/^[\uDC00-\uDFFF]$/,C=!d||s((function(){var t=o("Symbol")();return"[null]"!=A([t])||"{}"!=A({a:t})||"{}"!=A(Object(t))})),S=s((function(){return'"\\udf06\\ud834"'!==A("\udf06\ud834")||'"\\udead"'!==A("\udead")})),B=function(t,r){var n=l(arguments),e=p(r);if(u(e)||void 0!==t&&!f(t))return n[1]=function(t,r){if(u(e)&&(r=a(e,this,v(t),r)),!f(r))return r},i(A,null,n)},_=function(t,r,n){var e=h(n,r-1),o=h(n,r+1);return g(x,t)&&!g(E,o)||g(E,t)&&!g(x,e)?"\\u"+b(y(t,0),16):t};A&&e({target:"JSON",stat:!0,arity:3,forced:C||S},{stringify:function(t,r,n){var e=l(arguments),o=i(C?B:A,null,e);return S&&"string"==typeof o?m(o,w,_):o}})},9653:(t,r,n)=>{"use strict";var e=n(2109),o=n(1913),i=n(9781),a=n(7854),c=n(857),s=n(1702),u=n(4705),f=n(2597),l=n(9587),p=n(7976),d=n(2190),v=n(7593),A=n(7293),g=n(8006).f,h=n(1236).f,y=n(3070).f,m=n(863),b=n(3111).trim,w="Number",x=a[w],E=c[w],C=x.prototype,S=a.TypeError,B=s("".slice),_=s("".charCodeAt),O=u(w,!x(" 0o1")||!x("0b1")||x("+0x1")),j=function(t){var r,n=arguments.length<1?0:x(function(t){var r=v(t,"number");return"bigint"==typeof r?r:function(t){var r,n,e,o,i,a,c,s,u=v(t,"number");if(d(u))throw S("Cannot convert a Symbol value to a number");if("string"==typeof u&&u.length>2)if(u=b(u),43===(r=_(u,0))||45===r){if(88===(n=_(u,2))||120===n)return NaN}else if(48===r){switch(_(u,1)){case 66:case 98:e=2,o=49;break;case 79:case 111:e=8,o=55;break;default:return+u}for(a=(i=B(u,2)).length,c=0;c<a;c++)if((s=_(i,c))<48||s>o)return NaN;return parseInt(i,e)}return+u}(r)}(t));return p(C,r=this)&&A((function(){m(r)}))?l(Object(n),this,j):n};j.prototype=C,O&&!o&&(C.constructor=j),e({global:!0,constructor:!0,wrap:!0,forced:O},{Number:j});var T=function(t,r){for(var n,e=i?g(r):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),o=0;e.length>o;o++)f(r,n=e[o])&&!f(t,n)&&y(t,n,h(r,n))};o&&E&&T(c[w],E),(O||o)&&T(c[w],x)},9070:(t,r,n)=>{var e=n(2109),o=n(9781),i=n(3070).f;e({target:"Object",stat:!0,forced:Object.defineProperty!==i,sham:!o},{defineProperty:i})},9660:(t,r,n)=>{var e=n(2109),o=n(6293),i=n(7293),a=n(5181),c=n(7908);e({target:"Object",stat:!0,forced:!o||i((function(){a.f(1)}))},{getOwnPropertySymbols:function(t){var r=a.f;return r?r(c(t)):[]}})},1539:(t,r,n)=>{var e=n(1694),o=n(8052),i=n(288);e||o(Object.prototype,"toString",i,{unsafe:!0})},8783:(t,r,n)=>{"use strict";var e=n(8710).charAt,o=n(1340),i=n(9909),a=n(1656),c=n(6178),s="String Iterator",u=i.set,f=i.getterFor(s);a(String,"String",(function(t){u(this,{type:s,string:o(t),index:0})}),(function(){var t,r=f(this),n=r.string,o=r.index;return o>=n.length?c(void 0,!0):(t=e(n,o),r.index+=t.length,c(t,!1))}))},4032:(t,r,n)=>{"use strict";var e=n(2109),o=n(7854),i=n(6916),a=n(1702),c=n(1913),s=n(9781),u=n(6293),f=n(7293),l=n(2597),p=n(7976),d=n(9670),v=n(5656),A=n(4948),g=n(1340),h=n(9114),y=n(30),m=n(1956),b=n(8006),w=n(1156),x=n(5181),E=n(1236),C=n(3070),S=n(6048),B=n(5296),_=n(8052),O=n(7045),j=n(2309),T=n(6200),P=n(3501),L=n(9711),k=n(5112),I=n(6061),W=n(6800),F=n(6532),N=n(8003),M=n(9909),D=n(2092).forEach,R=T("hidden"),U="Symbol",q="prototype",G=M.set,V=M.getterFor(U),Y=Object[q],z=o.Symbol,Z=z&&z[q],H=o.TypeError,X=o.QObject,$=E.f,J=C.f,Q=w.f,K=B.f,tt=a([].push),rt=j("symbols"),nt=j("op-symbols"),et=j("wks"),ot=!X||!X[q]||!X[q].findChild,it=s&&f((function(){return 7!=y(J({},"a",{get:function(){return J(this,"a",{value:7}).a}})).a}))?function(t,r,n){var e=$(Y,r);e&&delete Y[r],J(t,r,n),e&&t!==Y&&J(Y,r,e)}:J,at=function(t,r){var n=rt[t]=y(Z);return G(n,{type:U,tag:t,description:r}),s||(n.description=r),n},ct=function(t,r,n){t===Y&&ct(nt,r,n),d(t);var e=A(r);return d(n),l(rt,e)?(n.enumerable?(l(t,R)&&t[R][e]&&(t[R][e]=!1),n=y(n,{enumerable:h(0,!1)})):(l(t,R)||J(t,R,h(1,{})),t[R][e]=!0),it(t,e,n)):J(t,e,n)},st=function(t,r){d(t);var n=v(r),e=m(n).concat(pt(n));return D(e,(function(r){s&&!i(ut,n,r)||ct(t,r,n[r])})),t},ut=function(t){var r=A(t),n=i(K,this,r);return!(this===Y&&l(rt,r)&&!l(nt,r))&&(!(n||!l(this,r)||!l(rt,r)||l(this,R)&&this[R][r])||n)},ft=function(t,r){var n=v(t),e=A(r);if(n!==Y||!l(rt,e)||l(nt,e)){var o=$(n,e);return!o||!l(rt,e)||l(n,R)&&n[R][e]||(o.enumerable=!0),o}},lt=function(t){var r=Q(v(t)),n=[];return D(r,(function(t){l(rt,t)||l(P,t)||tt(n,t)})),n},pt=function(t){var r=t===Y,n=Q(r?nt:v(t)),e=[];return D(n,(function(t){!l(rt,t)||r&&!l(Y,t)||tt(e,rt[t])})),e};u||(_(Z=(z=function(){if(p(Z,this))throw H("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?g(arguments[0]):void 0,r=L(t),n=function(t){this===Y&&i(n,nt,t),l(this,R)&&l(this[R],r)&&(this[R][r]=!1),it(this,r,h(1,t))};return s&&ot&&it(Y,r,{configurable:!0,set:n}),at(r,t)})[q],"toString",(function(){return V(this).tag})),_(z,"withoutSetter",(function(t){return at(L(t),t)})),B.f=ut,C.f=ct,S.f=st,E.f=ft,b.f=w.f=lt,x.f=pt,I.f=function(t){return at(k(t),t)},s&&(O(Z,"description",{configurable:!0,get:function(){return V(this).description}}),c||_(Y,"propertyIsEnumerable",ut,{unsafe:!0}))),e({global:!0,constructor:!0,wrap:!0,forced:!u,sham:!u},{Symbol:z}),D(m(et),(function(t){W(t)})),e({target:U,stat:!0,forced:!u},{useSetter:function(){ot=!0},useSimple:function(){ot=!1}}),e({target:"Object",stat:!0,forced:!u,sham:!s},{create:function(t,r){return void 0===r?y(t):st(y(t),r)},defineProperty:ct,defineProperties:st,getOwnPropertyDescriptor:ft}),e({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:lt}),F(),N(z,U),P[R]=!0},1817:(t,r,n)=>{"use strict";var e=n(2109),o=n(9781),i=n(7854),a=n(1702),c=n(2597),s=n(614),u=n(7976),f=n(1340),l=n(7045),p=n(9920),d=i.Symbol,v=d&&d.prototype;if(o&&s(d)&&(!("description"in v)||void 0!==d().description)){var A={},g=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:f(arguments[0]),r=u(v,this)?new d(t):void 0===t?d():d(t);return""===t&&(A[r]=!0),r};p(g,d),g.prototype=v,v.constructor=g;var h="Symbol(test)"==String(d("test")),y=a(v.valueOf),m=a(v.toString),b=/^Symbol\((.*)\)[^)]+$/,w=a("".replace),x=a("".slice);l(v,"description",{configurable:!0,get:function(){var t=y(this);if(c(A,t))return"";var r=m(t),n=h?x(r,7,-1):w(r,b,"$1");return""===n?void 0:n}}),e({global:!0,constructor:!0,forced:!0},{Symbol:g})}},763:(t,r,n)=>{var e=n(2109),o=n(5005),i=n(2597),a=n(1340),c=n(2309),s=n(2015),u=c("string-to-symbol-registry"),f=c("symbol-to-string-registry");e({target:"Symbol",stat:!0,forced:!s},{for:function(t){var r=a(t);if(i(u,r))return u[r];var n=o("Symbol")(r);return u[r]=n,f[n]=r,n}})},2165:(t,r,n)=>{n(6800)("iterator")},2526:(t,r,n)=>{n(4032),n(763),n(6620),n(8862),n(9660)},6620:(t,r,n)=>{var e=n(2109),o=n(2597),i=n(2190),a=n(6330),c=n(2309),s=n(2015),u=c("symbol-to-string-registry");e({target:"Symbol",stat:!0,forced:!s},{keyFor:function(t){if(!i(t))throw TypeError(a(t)+" is not a symbol");if(o(u,t))return u[t]}})},6649:(t,r,n)=>{var e=n(6800),o=n(6532);e("toPrimitive"),o()},3948:(t,r,n)=>{var e=n(7854),o=n(8324),i=n(8509),a=n(6992),c=n(8880),s=n(5112),u=s("iterator"),f=s("toStringTag"),l=a.values,p=function(t,r){if(t){if(t[u]!==l)try{c(t,u,l)}catch(r){t[u]=l}if(t[f]||c(t,f,r),o[r])for(var n in a)if(t[n]!==a[n])try{c(t,n,a[n])}catch(r){t[n]=a[n]}}};for(var d in o)p(e[d]&&e[d].prototype,d);p(i,"DOMTokenList")},1402:(t,r,n)=>{"use strict";n.d(r,{Z:()=>c});var e=n(7537),o=n.n(e),i=n(3645),a=n.n(i)()(o());a.push([t.id,"* {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  height: 100%;\n  width: 100%;\n  font-family: Arial, Helvetica, sans-serif;\n}\n\nspan {\n  line-height: 0;\n}\n\n/* Collapsible */\n\n.widget_collapsible, .widget_chat {\n  width: 30%;\n  margin: 1rem auto;\n  padding: 1rem;\n  border: 1px dashed rgb(116, 113, 126);\n  border-radius: 10px;\n  box-sizing: border-box;\n  background-color: #fff;\n}\n\n.widget_controls {\n  margin-bottom: 0.5rem;\n}\n\n.widget_button {\n  padding: 1rem;\n  border: 2px solid deepskyblue;\n  border-radius: 10px;\n  box-sizing: border-box;\n  background-color: deepskyblue;\n  color: white;  \n  font-weight: bold;\n}\n\n.widget_button:hover {\n  cursor: pointer;\n  background-color: dodgerblue;\n} \n\n.widget_button:focus {\n  border: 2px solid aqua;  \n}\n\n.widget_footer {   \n  overflow: hidden;\n}\n\n.widget_footer_string {\n  padding: 1rem;\n  line-height: 2rem;\n  border: 1px solid lightgrey;   \n}\n\n.show { \n  opacity: 1;\n  max-height: 30vh;\n  transition: opacity 0.25s 0.25s, max-height 0.5s steps(5, end);\n}\n\n.collapsed {\n  opacity: 0;\n  max-height: 0px; \n  transition: opacity 0.25s 0.25s, max-height 0.5s steps(5, end);   \n}\n\n/* Chat */\n\n.widget_chat_container {\n  position: absolute;\n  bottom: 10px;\n  right: 10px;\n  width: 30%;\n}\n\n.widget_round_button {\n  background-color: red;\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  position: absolute;\n  right: 10px;\n  bottom: 10px;\n  cursor: pointer;\n  opacity: 1;\n  transform-origin: center;\n  transform: scale(1);\n  transition: width 100ms linear, height 100ms linear, opacity 100ms linear, transform 100ms linear;\n}\n\n.widget_round_button:hover {\n  transform-origin: center;\n  transform: scale(1.2);\n  transition: transform 100ms linear;\n}\n\n.widget_chat {\n  width: 100%;\n  position: absolute;\n  right: 10px;\n  bottom: 10px; \n  margin: 1rem;\n  opacity: 1;\n  transform-origin: 100% bottom;\n  transform: scale(1);\n  transition: opacity 100ms linear, transform 100ms linear;\n}\n\n.widget_chat_remove {\n  margin-right: 0;\n  margin-left: auto;\n  width: 2rem;\n  text-align: center;\n  font-size: 1rem;\n  font-weight: bold;\n}\n\n.widget_chat_remove:hover {\n  cursor: pointer;\n}\n\n.widget_chat_button, .widget_chat_input {\n  width: 100%;\n  margin-top: 1rem;\n  border-radius: 10px;\n}\n\n.widget_chat_input {\n  resize: vertical;\n  min-height: 10rem;\n}\n\n.widget_chat.hide {\n  transform-origin: 100% bottom;\n  transform: scale(0);\n  opacity: 0;\n  transition: all 100ms linear;\n}\n\n.widget_round_button.hide {\n  transform: scale(0);\n  opacity: 0;\n  transition: all 100ms linear;\n}","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,yCAAyC;AAC3C;;AAEA;EACE,cAAc;AAChB;;AAEA,gBAAgB;;AAEhB;EACE,UAAU;EACV,iBAAiB;EACjB,aAAa;EACb,qCAAqC;EACrC,mBAAmB;EACnB,sBAAsB;EACtB,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;EACnB,sBAAsB;EACtB,6BAA6B;EAC7B,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,4BAA4B;AAC9B;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,2BAA2B;AAC7B;;AAEA;EACE,UAAU;EACV,gBAAgB;EAChB,8DAA8D;AAChE;;AAEA;EACE,UAAU;EACV,eAAe;EACf,8DAA8D;AAChE;;AAEA,SAAS;;AAET;EACE,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,UAAU;AACZ;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,eAAe;EACf,UAAU;EACV,wBAAwB;EACxB,mBAAmB;EACnB,iGAAiG;AACnG;;AAEA;EACE,wBAAwB;EACxB,qBAAqB;EACrB,kCAAkC;AACpC;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,YAAY;EACZ,UAAU;EACV,6BAA6B;EAC7B,mBAAmB;EACnB,wDAAwD;AAC1D;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,WAAW;EACX,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,6BAA6B;EAC7B,mBAAmB;EACnB,UAAU;EACV,4BAA4B;AAC9B;;AAEA;EACE,mBAAmB;EACnB,UAAU;EACV,4BAA4B;AAC9B",sourcesContent:["* {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  height: 100%;\n  width: 100%;\n  font-family: Arial, Helvetica, sans-serif;\n}\n\nspan {\n  line-height: 0;\n}\n\n/* Collapsible */\n\n.widget_collapsible, .widget_chat {\n  width: 30%;\n  margin: 1rem auto;\n  padding: 1rem;\n  border: 1px dashed rgb(116, 113, 126);\n  border-radius: 10px;\n  box-sizing: border-box;\n  background-color: #fff;\n}\n\n.widget_controls {\n  margin-bottom: 0.5rem;\n}\n\n.widget_button {\n  padding: 1rem;\n  border: 2px solid deepskyblue;\n  border-radius: 10px;\n  box-sizing: border-box;\n  background-color: deepskyblue;\n  color: white;  \n  font-weight: bold;\n}\n\n.widget_button:hover {\n  cursor: pointer;\n  background-color: dodgerblue;\n} \n\n.widget_button:focus {\n  border: 2px solid aqua;  \n}\n\n.widget_footer {   \n  overflow: hidden;\n}\n\n.widget_footer_string {\n  padding: 1rem;\n  line-height: 2rem;\n  border: 1px solid lightgrey;   \n}\n\n.show { \n  opacity: 1;\n  max-height: 30vh;\n  transition: opacity 0.25s 0.25s, max-height 0.5s steps(5, end);\n}\n\n.collapsed {\n  opacity: 0;\n  max-height: 0px; \n  transition: opacity 0.25s 0.25s, max-height 0.5s steps(5, end);   \n}\n\n/* Chat */\n\n.widget_chat_container {\n  position: absolute;\n  bottom: 10px;\n  right: 10px;\n  width: 30%;\n}\n\n.widget_round_button {\n  background-color: red;\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  position: absolute;\n  right: 10px;\n  bottom: 10px;\n  cursor: pointer;\n  opacity: 1;\n  transform-origin: center;\n  transform: scale(1);\n  transition: width 100ms linear, height 100ms linear, opacity 100ms linear, transform 100ms linear;\n}\n\n.widget_round_button:hover {\n  transform-origin: center;\n  transform: scale(1.2);\n  transition: transform 100ms linear;\n}\n\n.widget_chat {\n  width: 100%;\n  position: absolute;\n  right: 10px;\n  bottom: 10px; \n  margin: 1rem;\n  opacity: 1;\n  transform-origin: 100% bottom;\n  transform: scale(1);\n  transition: opacity 100ms linear, transform 100ms linear;\n}\n\n.widget_chat_remove {\n  margin-right: 0;\n  margin-left: auto;\n  width: 2rem;\n  text-align: center;\n  font-size: 1rem;\n  font-weight: bold;\n}\n\n.widget_chat_remove:hover {\n  cursor: pointer;\n}\n\n.widget_chat_button, .widget_chat_input {\n  width: 100%;\n  margin-top: 1rem;\n  border-radius: 10px;\n}\n\n.widget_chat_input {\n  resize: vertical;\n  min-height: 10rem;\n}\n\n.widget_chat.hide {\n  transform-origin: 100% bottom;\n  transform: scale(0);\n  opacity: 0;\n  transition: all 100ms linear;\n}\n\n.widget_round_button.hide {\n  transform: scale(0);\n  opacity: 0;\n  transition: all 100ms linear;\n}"],sourceRoot:""}]);const c=a},3645:t=>{"use strict";t.exports=function(t){var r=[];return r.toString=function(){return this.map((function(r){var n="",e=void 0!==r[5];return r[4]&&(n+="@supports (".concat(r[4],") {")),r[2]&&(n+="@media ".concat(r[2]," {")),e&&(n+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),n+=t(r),e&&(n+="}"),r[2]&&(n+="}"),r[4]&&(n+="}"),n})).join("")},r.i=function(t,n,e,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(e)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var u=0;u<t.length;u++){var f=[].concat(t[u]);e&&a[f[0]]||(void 0!==i&&(void 0===f[5]||(f[1]="@layer".concat(f[5].length>0?" ".concat(f[5]):""," {").concat(f[1],"}")),f[5]=i),n&&(f[2]?(f[1]="@media ".concat(f[2]," {").concat(f[1],"}"),f[2]=n):f[2]=n),o&&(f[4]?(f[1]="@supports (".concat(f[4],") {").concat(f[1],"}"),f[4]=o):f[4]="".concat(o)),r.push(f))}},r}},7537:t=>{"use strict";t.exports=function(t){var r=t[1],n=t[3];if(!n)return r;if("function"==typeof btoa){var e=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e),i="/*# ".concat(o," */");return[r].concat([i]).join("\n")}return[r].join("\n")}},3379:t=>{"use strict";var r=[];function n(t){for(var n=-1,e=0;e<r.length;e++)if(r[e].identifier===t){n=e;break}return n}function e(t,e){for(var i={},a=[],c=0;c<t.length;c++){var s=t[c],u=e.base?s[0]+e.base:s[0],f=i[u]||0,l="".concat(u," ").concat(f);i[u]=f+1;var p=n(l),d={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)r[p].references++,r[p].updater(d);else{var v=o(d,e);e.byIndex=c,r.splice(c,0,{identifier:l,updater:v,references:1})}a.push(l)}return a}function o(t,r){var n=r.domAPI(r);return n.update(t),function(r){if(r){if(r.css===t.css&&r.media===t.media&&r.sourceMap===t.sourceMap&&r.supports===t.supports&&r.layer===t.layer)return;n.update(t=r)}else n.remove()}}t.exports=function(t,o){var i=e(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var c=n(i[a]);r[c].references--}for(var s=e(t,o),u=0;u<i.length;u++){var f=n(i[u]);0===r[f].references&&(r[f].updater(),r.splice(f,1))}i=s}}},569:t=>{"use strict";var r={};t.exports=function(t,n){var e=function(t){if(void 0===r[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}r[t]=n}return r[t]}(t);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(n)}},9216:t=>{"use strict";t.exports=function(t){var r=document.createElement("style");return t.setAttributes(r,t.attributes),t.insert(r,t.options),r}},3565:(t,r,n)=>{"use strict";t.exports=function(t){var r=n.nc;r&&t.setAttribute("nonce",r)}},7795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var r=t.insertStyleElement(t);return{update:function(n){!function(t,r,n){var e="";n.supports&&(e+="@supports (".concat(n.supports,") {")),n.media&&(e+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(e+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),e+=n.css,o&&(e+="}"),n.media&&(e+="}"),n.supports&&(e+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),r.styleTagTransform(e,t,r.options)}(r,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)}}}},4589:t=>{"use strict";t.exports=function(t,r){if(r.styleSheet)r.styleSheet.cssText=t;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(t))}}}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var i=r[e]={id:e,exports:{}};return t[e].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return n.d(r,{a:r}),r},n.d=(t,r)=>{for(var e in r)n.o(r,e)&&!n.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:r[e]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),n.nc=void 0,(()=>{"use strict";function t(r){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(r)}function r(r,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(r,(void 0,i=function(r,n){if("object"!==t(r)||null===r)return r;var e=r[Symbol.toPrimitive];if(void 0!==e){var o=e.call(r,"string");if("object"!==t(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(r)}(o.key),"symbol"===t(i)?i:String(i)),o)}var i}n(6649),n(6078),n(2526),n(1817),n(1539),n(9653),n(9070),n(2165),n(6992),n(8783),n(3948);var e=function(){function t(){!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this.container=document.querySelector(".main_container")}var n,e;return n=t,(e=[{key:"init",value:function(){if(this.container){this.container.insertAdjacentHTML("beforeEnd",'\n    <div class="widget widget_collapsible">       \n      <div class="widget_controls"> \n        <button class="widget_button">See more</button> \n      </div>\n      <div class="widget_footer collapsed">         \n        <div class="widget_footer_string">\n        Подобный виджет есть в рамках Bootstrap, но как мы с вами "знаем": "jQuery не нужен", поэтому вам нужно реализовать такой же виджет на чистом JS.\n        </div>\n      </div> \n    </div>');var t=document.querySelector(".widget_button");this.container.querySelector(".widget_collapsible").addEventListener("click",(function(r){if(r.target===t){t.textContent="Collapse"===t.textContent?"See more":"Collapse";var n=r.currentTarget.querySelector(".widget_footer");n.classList.toggle("collapsed"),n.classList.toggle("show")}}))}}}])&&r(n.prototype,e),Object.defineProperty(n,"prototype",{writable:!1}),t}();function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function i(t,r){for(var n=0;n<r.length;n++){var e=r[n];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(t,(void 0,i=function(t,r){if("object"!==o(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var e=n.call(t,"string");if("object"!==o(e))return e;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e.key),"symbol"===o(i)?i:String(i)),e)}var i}var a=function(){function t(){!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this.container=document.querySelector(".main_container")}var r,n;return r=t,(n=[{key:"init",value:function(){var t=this;this.container&&(this.container.insertAdjacentHTML("beforeEnd",'\n    <div class="widget_chat_container">\n      <div class="widget_round_button">\n      </div>\n      <div class="widget widget_chat hide">\n        <div class="widget_chat_remove">\n          &times;\n        </div> \n        <h2>Напишите нам</h2>\n        <form class="widget_chat_form">  \n          <textarea class="widget_chat_input"></textarea>           \n          <div class="widget_controls widget_chat_controls"> \n            <button class="widget_button widget_chat_button">Отправить</button> \n          </div>\n        </form>\n      </div>\n    </div>'),this.chatWidgetContainer=this.container.querySelector(".widget_chat_container"),this.chatWidgetButton=this.chatWidgetContainer.querySelector(".widget_round_button"),this.chatWidgetWindow=this.chatWidgetContainer.querySelector(".widget_chat"),this.chatWidgetWindowCloseBtn=this.chatWidgetWindow.querySelector(".widget_chat_remove"),this.chatWidgetButton.addEventListener("click",(function(r){r.target.classList.add("hide"),t.chatWidgetWindow.classList.remove("hide")})),this.chatWidgetWindow.addEventListener("submit",(function(r){r.preventDefault(),t.chatWidgetWindow.classList.add("hide"),t.chatWidgetButton.classList.remove("hide")})),this.chatWidgetWindowCloseBtn.addEventListener("click",(function(){t.chatWidgetWindow.classList.add("hide"),t.chatWidgetButton.classList.remove("hide")})))}}])&&i(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}(),c=n(3379),s=n.n(c),u=n(7795),f=n.n(u),l=n(569),p=n.n(l),d=n(3565),v=n.n(d),A=n(9216),g=n.n(A),h=n(4589),y=n.n(h),m=n(1402),b={};b.styleTagTransform=y(),b.setAttributes=v(),b.insert=p().bind(null,"head"),b.domAPI=f(),b.insertStyleElement=g(),s()(m.Z,b),m.Z&&m.Z.locals&&m.Z.locals;var w=new e,x=new a;document.addEventListener("DOMContentLoaded",(function(){w.init(),x.init()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SCxVQUFVd2MsSUFBSSxRQUN4Qk4sRUFBS0csaUJBQWlCcmMsVUFBVThZLE9BQU8sT0FDekMsSUFFQWxjLEtBQUt5ZixpQkFBaUJULGlCQUFpQixVQUFVLFNBQUNqQyxHQUNoREEsRUFBRThDLGlCQUNGUCxFQUFLRyxpQkFBaUJyYyxVQUFVd2MsSUFBSSxRQUNwQ04sRUFBS0UsaUJBQWlCcGMsVUFBVThZLE9BQU8sT0FDekMsSUFFQWxjLEtBQUswZix5QkFBeUJWLGlCQUFpQixTQUFTLFdBQ3RETSxFQUFLRyxpQkFBaUJyYyxVQUFVd2MsSUFBSSxRQUNwQ04sRUFBS0UsaUJBQWlCcGMsVUFBVThZLE9BQU8sT0FDekMsSUFDRixNLG9FQUFDbUQsQ0FBQSxDQS9DNEIsRywySENXM0I1ZSxFQUFVLENBQUMsRUFFZkEsRUFBUStjLGtCQUFvQixJQUM1Qi9jLEVBQVF5YyxjQUFnQixJQUVsQnpjLEVBQVFnYyxPQUFTLFNBQWMsS0FBTSxRQUUzQ2hjLEVBQVFzYixPQUFTLElBQ2pCdGIsRUFBUThjLG1CQUFxQixJQUVoQixJQUFJLElBQVM5YyxHQUtKLEtBQVcsWUFBaUIsV0N0QmxELElBQU1xZixFQUFpQixJQUFJQyxFQUNyQkMsRUFBYSxJQUFJQyxFQUV2QmpmLFNBQVNnZSxpQkFBaUIsb0JBQW9CLFdBQzVDYyxFQUFlSSxPQUNmRixFQUFXRSxNQUNiLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc2xpY2UuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0LmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWFsbC5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1hcHBseS5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbC5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtYWNjZXNzb3IuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWpzb24tcmVwbGFjZXItZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtbWV0aG9kLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYWtlLWJ1aWx0LWluLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC10cnVuYy5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N5bWJvbC1kZWZpbmUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLXJlZ2lzdHJ5LWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHkuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXkuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90cnktdG8tc3RyaW5nLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1Zy5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlYWstbWFwLWJhc2ljLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3doaXRlc3BhY2VzLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZm9yLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmtleS1mb3IuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9zcmMvY3NzL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2Foai1hbmltYXRpb24vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Foai1hbmltYXRpb24vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2Foai1hbmltYXRpb24vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9haGotYW5pbWF0aW9uLy4vc3JjL2pzL3dpZGdldHMvY29sbGFwc2UuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL3NyYy9qcy93aWRnZXRzL2NoYXQuanMiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL3NyYy9jc3Mvc3R5bGUuY3NzPzlmY2QiLCJ3ZWJwYWNrOi8vYWhqLWFuaW1hdGlvbi8uL3NyYy9qcy9hcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NhbGxhYmxlKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xufTtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmICh0eXBlb2YgYXJndW1lbnQgPT0gJ29iamVjdCcgfHwgaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArICRTdHJpbmcoYXJndW1lbnQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHkoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgJFN0cmluZyA9IFN0cmluZztcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBUeXBlKGFyZ3VtZW50KSBpcyBPYmplY3RgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNPYmplY3QoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93ICRUeXBlRXJyb3IoJFN0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlclJlamVjdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfUkVKRUNUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShzZWxmKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiB8fCBJU19GSUxURVJfUkVKRUNUID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAvLyBldmVyeVxuICAgICAgICAgIGNhc2UgNzogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJSZWplY3RcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlclJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWZpbHRlcmluZ1xuICBmaWx0ZXJSZWplY3Q6IGNyZWF0ZU1ldGhvZCg3KVxufTtcbiIsInZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG52YXIgJEFycmF5ID0gQXJyYXk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgdmFyIHJlc3VsdCA9ICRBcnJheShtYXgoZmluIC0gaywgMCkpO1xuICBmb3IgKHZhciBuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gIHJlc3VsdC5sZW5ndGggPSBuO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyhbXS5zbGljZSk7XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciAkQXJyYXkgPSBBcnJheTtcblxuLy8gYSBwYXJ0IG9mIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXkpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAoaXNDb25zdHJ1Y3RvcihDKSAmJiAoQyA9PT0gJEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/ICRBcnJheSA6IEM7XG59O1xuIiwidmFyIGFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxuLy8gYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKGFycmF5U3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsQXJyYXkpKShsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoKTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciB0b1N0cmluZyA9IHVuY3VycnlUaGlzKHt9LnRvU3RyaW5nKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHN0cmluZ1NsaWNlKHRvU3RyaW5nKGl0KSwgOCwgLTEpO1xufTtcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbi8vIGdldHRpbmcgdGFnIGZyb20gRVM2KyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2Bcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8gY2xhc3NvZlJhdyA6IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9ICRPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiBpc0NhbGxhYmxlKE8uY2FsbGVlKSA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsInZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UsIGV4Y2VwdGlvbnMpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpICYmICEoZXhjZXB0aW9ucyAmJiBoYXNPd24oZXhjZXB0aW9ucywga2V5KSkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwiLy8gYENyZWF0ZUl0ZXJSZXN1bHRPYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVpdGVycmVzdWx0b2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgZG9uZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6IGRvbmUgfTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5VG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGFuT2JqZWN0KHRoaXMpO1xuICBpZiAoaGludCA9PT0gJ3N0cmluZycgfHwgaGludCA9PT0gJ2RlZmF1bHQnKSBoaW50ID0gJ3N0cmluZyc7XG4gIGVsc2UgaWYgKGhpbnQgIT09ICdudW1iZXInKSB0aHJvdyAkVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gb3JkaW5hcnlUb1ByaW1pdGl2ZSh0aGlzLCBoaW50KTtcbn07XG4iLCJ2YXIgbWFrZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFrZS1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lLCBkZXNjcmlwdG9yKSB7XG4gIGlmIChkZXNjcmlwdG9yLmdldCkgbWFrZUJ1aWx0SW4oZGVzY3JpcHRvci5nZXQsIG5hbWUsIHsgZ2V0dGVyOiB0cnVlIH0pO1xuICBpZiAoZGVzY3JpcHRvci5zZXQpIG1ha2VCdWlsdEluKGRlc2NyaXB0b3Iuc2V0LCBuYW1lLCB7IHNldHRlcjogdHJ1ZSB9KTtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5LmYodGFyZ2V0LCBuYW1lLCBkZXNjcmlwdG9yKTtcbn07XG4iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBtYWtlQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYWtlLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucy5lbnVtZXJhYmxlO1xuICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uYW1lIDoga2V5O1xuICBpZiAoaXNDYWxsYWJsZSh2YWx1ZSkpIG1ha2VCdWlsdEluKHZhbHVlLCBuYW1lLCBvcHRpb25zKTtcbiAgaWYgKG9wdGlvbnMuZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBkZWZpbmVHbG9iYWxQcm9wZXJ0eShrZXksIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFvcHRpb25zLnVuc2FmZSkgZGVsZXRlIE9ba2V5XTtcbiAgICAgIGVsc2UgaWYgKE9ba2V5XSkgc2ltcGxlID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6ICFvcHRpb25zLm5vbkNvbmZpZ3VyYWJsZSxcbiAgICAgIHdyaXRhYmxlOiAhb3B0aW9ucy5ub25Xcml0YWJsZVxuICAgIH0pO1xuICB9IHJldHVybiBPO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBEZXRlY3QgSUU4J3MgaW5jb21wbGV0ZSBkZWZpbmVQcm9wZXJ0eSBpbXBsZW1lbnRhdGlvblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsInZhciBkb2N1bWVudEFsbCA9IHR5cGVvZiBkb2N1bWVudCA9PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5hbGw7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtSXNIVE1MRERBLWludGVybmFsLXNsb3Rcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLXR5cGVvZi11bmRlZmluZWQgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBJU19IVE1MRERBID0gdHlwZW9mIGRvY3VtZW50QWxsID09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50QWxsICE9PSB1bmRlZmluZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhbGw6IGRvY3VtZW50QWxsLFxuICBJU19IVE1MRERBOiBJU19IVE1MRERBXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsIi8vIGluIG9sZCBXZWJLaXQgdmVyc2lvbnMsIGBlbGVtZW50LmNsYXNzTGlzdGAgaXMgbm90IGFuIGluc3RhbmNlIG9mIGdsb2JhbCBgRE9NVG9rZW5MaXN0YFxudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG52YXIgY2xhc3NMaXN0ID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdzcGFuJykuY2xhc3NMaXN0O1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IGNsYXNzTGlzdCAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IgJiYgY2xhc3NMaXN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01Ub2tlbkxpc3RQcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgPyB1bmRlZmluZWQgOiBET01Ub2tlbkxpc3RQcm90b3R5cGU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gJ3VuZGVmaW5lZCcgJiYgU3RyaW5nKG5hdmlnYXRvci51c2VyQWdlbnQpIHx8ICcnO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEZW5vID0gZ2xvYmFsLkRlbm87XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnMgfHwgRGVubyAmJiBEZW5vLnZlcnNpb247XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgLy8gaW4gb2xkIENocm9tZSwgdmVyc2lvbnMgb2YgVjggaXNuJ3QgVjggPSBDaHJvbWUgLyAxMFxuICAvLyBidXQgdGhlaXIgY29ycmVjdCB2ZXJzaW9ucyBhcmUgbm90IGludGVyZXN0aW5nIGZvciB1c1xuICB2ZXJzaW9uID0gbWF0Y2hbMF0gPiAwICYmIG1hdGNoWzBdIDwgNCA/IDEgOiArKG1hdGNoWzBdICsgbWF0Y2hbMV0pO1xufVxuXG4vLyBCcm93c2VyRlMgTm9kZUpTIGBwcm9jZXNzYCBwb2x5ZmlsbCBpbmNvcnJlY3RseSBzZXQgYC52OGAgdG8gYDAuMGBcbi8vIHNvIGNoZWNrIGB1c2VyQWdlbnRgIGV2ZW4gaWYgYC52OGAgZXhpc3RzLCBidXQgMFxuaWYgKCF2ZXJzaW9uICYmIHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9ICttYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb247XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUdsb2JhbFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHknKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgICAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLmRvbnRDYWxsR2V0U2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuICBvcHRpb25zLm5hbWUgICAgICAgICAgIC0gdGhlIC5uYW1lIG9mIHRoZSBmdW5jdGlvbiBpZiBpdCBkb2VzIG5vdCBtYXRjaCB0aGUga2V5XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IGRlZmluZUdsb2JhbFByb3BlcnR5KFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMuZG9udENhbGxHZXRTZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgZGVmaW5lQnVpbHRJbih0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgYXBwbHkgPSBGdW5jdGlvblByb3RvdHlwZS5hcHBseTtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXJlZmxlY3QgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgUmVmbGVjdCA9PSAnb2JqZWN0JyAmJiBSZWZsZWN0LmFwcGx5IHx8IChOQVRJVkVfQklORCA/IGNhbGwuYmluZChhcHBseSkgOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjYWxsLmFwcGx5KGFwcGx5LCBhcmd1bWVudHMpO1xufSk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZScpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIGJpbmQgPSB1bmN1cnJ5VGhpcyh1bmN1cnJ5VGhpcy5iaW5kKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCkge1xuICBhQ2FsbGFibGUoZm4pO1xuICByZXR1cm4gdGhhdCA9PT0gdW5kZWZpbmVkID8gZm4gOiBOQVRJVkVfQklORCA/IGJpbmQoZm4sIHRoYXQpIDogZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tZnVuY3Rpb24tcHJvdG90eXBlLWJpbmQgLS0gc2FmZVxuICB2YXIgdGVzdCA9IChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pLmJpbmQoKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlXG4gIHJldHVybiB0eXBlb2YgdGVzdCAhPSAnZnVuY3Rpb24nIHx8IHRlc3QuaGFzT3duUHJvcGVydHkoJ3Byb3RvdHlwZScpO1xufSk7XG4iLCJ2YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/IGNhbGwuYmluZChjYWxsKSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoY2FsbCwgYXJndW1lbnRzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0RGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciBFWElTVFMgPSBoYXNPd24oRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJyk7XG4vLyBhZGRpdGlvbmFsIHByb3RlY3Rpb24gZnJvbSBtaW5pZmllZCAvIG1hbmdsZWQgLyBkcm9wcGVkIGZ1bmN0aW9uIG5hbWVzXG52YXIgUFJPUEVSID0gRVhJU1RTICYmIChmdW5jdGlvbiBzb21ldGhpbmcoKSB7IC8qIGVtcHR5ICovIH0pLm5hbWUgPT09ICdzb21ldGhpbmcnO1xudmFyIENPTkZJR1VSQUJMRSA9IEVYSVNUUyAmJiAoIURFU0NSSVBUT1JTIHx8IChERVNDUklQVE9SUyAmJiBnZXREZXNjcmlwdG9yKEZ1bmN0aW9uUHJvdG90eXBlLCAnbmFtZScpLmNvbmZpZ3VyYWJsZSkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRVhJU1RTOiBFWElTVFMsXG4gIFBST1BFUjogUFJPUEVSLFxuICBDT05GSUdVUkFCTEU6IENPTkZJR1VSQUJMRVxufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgbWV0aG9kKSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxuICAgIHJldHVybiB1bmN1cnJ5VGhpcyhhQ2FsbGFibGUoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIGtleSlbbWV0aG9kXSkpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuIiwidmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4pIHtcbiAgLy8gTmFzaG9ybiBidWc6XG4gIC8vICAgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzExMjhcbiAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTEzMFxuICBpZiAoY2xhc3NvZlJhdyhmbikgPT09ICdGdW5jdGlvbicpIHJldHVybiB1bmN1cnJ5VGhpcyhmbik7XG59O1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcbnZhciB1bmN1cnJ5VGhpc1dpdGhCaW5kID0gTkFUSVZFX0JJTkQgJiYgRnVuY3Rpb25Qcm90b3R5cGUuYmluZC5iaW5kKGNhbGwsIGNhbGwpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gdW5jdXJyeVRoaXNXaXRoQmluZCA6IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKSA6IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZXBsYWNlcikge1xuICBpZiAoaXNDYWxsYWJsZShyZXBsYWNlcikpIHJldHVybiByZXBsYWNlcjtcbiAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmV0dXJuO1xuICB2YXIgcmF3TGVuZ3RoID0gcmVwbGFjZXIubGVuZ3RoO1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0xlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGVsZW1lbnQgPSByZXBsYWNlcltpXTtcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT0gJ3N0cmluZycpIHB1c2goa2V5cywgZWxlbWVudCk7XG4gICAgZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQgPT0gJ251bWJlcicgfHwgY2xhc3NvZihlbGVtZW50KSA9PSAnTnVtYmVyJyB8fCBjbGFzc29mKGVsZW1lbnQpID09ICdTdHJpbmcnKSBwdXNoKGtleXMsIHRvU3RyaW5nKGVsZW1lbnQpKTtcbiAgfVxuICB2YXIga2V5c0xlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgcm9vdCA9IHRydWU7XG4gIHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChyb290KSB7XG4gICAgICByb290ID0gZmFsc2U7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KHRoaXMpKSByZXR1cm4gdmFsdWU7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzTGVuZ3RoOyBqKyspIGlmIChrZXlzW2pdID09PSBrZXkpIHJldHVybiB2YWx1ZTtcbiAgfTtcbn07XG4iLCJ2YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xuXG4vLyBgR2V0TWV0aG9kYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChWLCBQKSB7XG4gIHZhciBmdW5jID0gVltQXTtcbiAgcmV0dXJuIGlzTnVsbE9yVW5kZWZpbmVkKGZ1bmMpID8gdW5kZWZpbmVkIDogYUNhbGxhYmxlKGZ1bmMpO1xufTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IHRoaXMgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIGhhc093blByb3BlcnR5ID0gdW5jdXJyeVRoaXMoe30uaGFzT3duUHJvcGVydHkpO1xuXG4vLyBgSGFzT3duUHJvcGVydHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1oYXNvd25wcm9wZXJ0eVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1oYXNvd24gLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaGFzT3duIHx8IGZ1bmN0aW9uIGhhc093bihpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eSh0b09iamVjdChpdCksIGtleSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rcyB0byBJRTggZm9yIGl0cyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xudmFyIHNwbGl0ID0gdW5jdXJyeVRoaXMoJycuc3BsaXQpO1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlXG4gIHJldHVybiAhJE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQoaXQsICcnKSA6ICRPYmplY3QoaXQpO1xufSA6ICRPYmplY3Q7XG4iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG5cbi8vIG1ha2VzIHN1YmNsYXNzaW5nIHdvcmsgY29ycmVjdCBmb3Igd3JhcHBlZCBidWlsdC1pbnNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCR0aGlzLCBkdW1teSwgV3JhcHBlcikge1xuICB2YXIgTmV3VGFyZ2V0LCBOZXdUYXJnZXRQcm90b3R5cGU7XG4gIGlmIChcbiAgICAvLyBpdCBjYW4gd29yayBvbmx5IHdpdGggbmF0aXZlIGBzZXRQcm90b3R5cGVPZmBcbiAgICBzZXRQcm90b3R5cGVPZiAmJlxuICAgIC8vIHdlIGhhdmVuJ3QgY29tcGxldGVseSBjb3JyZWN0IHByZS1FUzYgd2F5IGZvciBnZXR0aW5nIGBuZXcudGFyZ2V0YCwgc28gdXNlIHRoaXNcbiAgICBpc0NhbGxhYmxlKE5ld1RhcmdldCA9IGR1bW15LmNvbnN0cnVjdG9yKSAmJlxuICAgIE5ld1RhcmdldCAhPT0gV3JhcHBlciAmJlxuICAgIGlzT2JqZWN0KE5ld1RhcmdldFByb3RvdHlwZSA9IE5ld1RhcmdldC5wcm90b3R5cGUpICYmXG4gICAgTmV3VGFyZ2V0UHJvdG90eXBlICE9PSBXcmFwcGVyLnByb3RvdHlwZVxuICApIHNldFByb3RvdHlwZU9mKCR0aGlzLCBOZXdUYXJnZXRQcm90b3R5cGUpO1xuICByZXR1cm4gJHRoaXM7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhGdW5jdGlvbi50b1N0cmluZyk7XG5cbi8vIHRoaXMgaGVscGVyIGJyb2tlbiBpbiBgY29yZS1qc0AzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICghaXNDYWxsYWJsZShzdG9yZS5pbnNwZWN0U291cmNlKSkge1xuICBzdG9yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlYWstbWFwLWJhc2ljLWRldGVjdGlvbicpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCA9ICdPYmplY3QgYWxyZWFkeSBpbml0aWFsaXplZCc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQIHx8IHNoYXJlZC5zdGF0ZSkge1xuICB2YXIgc3RvcmUgPSBzaGFyZWQuc3RhdGUgfHwgKHNoYXJlZC5zdGF0ZSA9IG5ldyBXZWFrTWFwKCkpO1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWFzc2lnbiAtLSBwcm90b3R5cGUgbWV0aG9kcyBwcm90ZWN0aW9uICovXG4gIHN0b3JlLmdldCA9IHN0b3JlLmdldDtcbiAgc3RvcmUuaGFzID0gc3RvcmUuaGFzO1xuICBzdG9yZS5zZXQgPSBzdG9yZS5zZXQ7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1hc3NpZ24gLS0gcHJvdG90eXBlIG1ldGhvZHMgcHJvdGVjdGlvbiAqL1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaWYgKHN0b3JlLmhhcyhpdCkpIHRocm93IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgc3RvcmUuc2V0KGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0KGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHN0b3JlLmhhcyhpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChoYXNPd24oaXQsIFNUQVRFKSkgdGhyb3cgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaGFzT3duKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1pc2FycmF5IC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZ3VtZW50KSB7XG4gIHJldHVybiBjbGFzc29mKGFyZ3VtZW50KSA9PSAnQXJyYXknO1xufTtcbiIsInZhciAkZG9jdW1lbnRBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtYWxsJyk7XG5cbnZhciBkb2N1bWVudEFsbCA9ICRkb2N1bWVudEFsbC5hbGw7XG5cbi8vIGBJc0NhbGxhYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZVxubW9kdWxlLmV4cG9ydHMgPSAkZG9jdW1lbnRBbGwuSVNfSFRNTEREQSA/IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbicgfHwgYXJndW1lbnQgPT09IGRvY3VtZW50QWxsO1xufSA6IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBlbXB0eSA9IFtdO1xudmFyIGNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG52YXIgY29uc3RydWN0b3JSZWdFeHAgPSAvXlxccyooPzpjbGFzc3xmdW5jdGlvbilcXGIvO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKTtcbnZhciBJTkNPUlJFQ1RfVE9fU1RSSU5HID0gIWNvbnN0cnVjdG9yUmVnRXhwLmV4ZWMobm9vcCk7XG5cbnZhciBpc0NvbnN0cnVjdG9yTW9kZXJuID0gZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICBpZiAoIWlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gZmFsc2U7XG4gIHRyeSB7XG4gICAgY29uc3RydWN0KG5vb3AsIGVtcHR5LCBhcmd1bWVudCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG52YXIgaXNDb25zdHJ1Y3RvckxlZ2FjeSA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlO1xuICBzd2l0Y2ggKGNsYXNzb2YoYXJndW1lbnQpKSB7XG4gICAgY2FzZSAnQXN5bmNGdW5jdGlvbic6XG4gICAgY2FzZSAnR2VuZXJhdG9yRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nOiByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyB3ZSBjYW4ndCBjaGVjayAucHJvdG90eXBlIHNpbmNlIGNvbnN0cnVjdG9ycyBwcm9kdWNlZCBieSAuYmluZCBoYXZlbid0IGl0XG4gICAgLy8gYEZ1bmN0aW9uI3RvU3RyaW5nYCB0aHJvd3Mgb24gc29tZSBidWlsdC1pdCBmdW5jdGlvbiBpbiBzb21lIGxlZ2FjeSBlbmdpbmVzXG4gICAgLy8gKGZvciBleGFtcGxlLCBgRE9NUXVhZGAgYW5kIHNpbWlsYXIgaW4gRkY0MS0pXG4gICAgcmV0dXJuIElOQ09SUkVDVF9UT19TVFJJTkcgfHwgISFleGVjKGNvbnN0cnVjdG9yUmVnRXhwLCBpbnNwZWN0U291cmNlKGFyZ3VtZW50KSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbmlzQ29uc3RydWN0b3JMZWdhY3kuc2hhbSA9IHRydWU7XG5cbi8vIGBJc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjb25zdHJ1Y3RvclxubW9kdWxlLmV4cG9ydHMgPSAhY29uc3RydWN0IHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhbGxlZDtcbiAgcmV0dXJuIGlzQ29uc3RydWN0b3JNb2Rlcm4oaXNDb25zdHJ1Y3Rvck1vZGVybi5jYWxsKVxuICAgIHx8ICFpc0NvbnN0cnVjdG9yTW9kZXJuKE9iamVjdClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihmdW5jdGlvbiAoKSB7IGNhbGxlZCA9IHRydWU7IH0pXG4gICAgfHwgY2FsbGVkO1xufSkgPyBpc0NvbnN0cnVjdG9yTGVnYWN5IDogaXNDb25zdHJ1Y3Rvck1vZGVybjtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiBpc0NhbGxhYmxlKGRldGVjdGlvbikgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsIi8vIHdlIGNhbid0IHVzZSBqdXN0IGBpdCA9PSBudWxsYCBzaW5jZSBvZiBgZG9jdW1lbnQuYWxsYCBzcGVjaWFsIGNhc2Vcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtSXNIVE1MRERBLWludGVybmFsLXNsb3QtYWVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IG51bGwgfHwgaXQgPT09IHVuZGVmaW5lZDtcbn07XG4iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyICRkb2N1bWVudEFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1hbGwnKTtcblxudmFyIGRvY3VtZW50QWxsID0gJGRvY3VtZW50QWxsLmFsbDtcblxubW9kdWxlLmV4cG9ydHMgPSAkZG9jdW1lbnRBbGwuSVNfSFRNTEREQSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KSB8fCBpdCA9PT0gZG9jdW1lbnRBbGw7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IGlzQ2FsbGFibGUoaXQpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbm1vZHVsZS5leHBvcnRzID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyICRTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbiAgcmV0dXJuIGlzQ2FsbGFibGUoJFN5bWJvbCkgJiYgaXNQcm90b3R5cGVPZigkU3ltYm9sLnByb3RvdHlwZSwgJE9iamVjdChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCwgRU5VTUVSQUJMRV9ORVhUKSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoKyFFTlVNRVJBQkxFX05FWFQsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEZ1bmN0aW9uTmFtZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY3JlYXRlLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIFBST1BFUl9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLlBST1BFUjtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5DT05GSUdVUkFCTEU7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBJdGVyYXRvcnNDb3JlLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBJdGVyYXRvcnNDb3JlLkJVR0dZX1NBRkFSSV9JVEVSQVRPUlM7XG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcbnZhciBFTlRSSUVTID0gJ2VudHJpZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhYmxlLCBOQU1FLCBJdGVyYXRvckNvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuXG4gIHZhciBnZXRJdGVyYXRpb25NZXRob2QgPSBmdW5jdGlvbiAoS0lORCkge1xuICAgIGlmIChLSU5EID09PSBERUZBVUxUICYmIGRlZmF1bHRJdGVyYXRvcikgcmV0dXJuIGRlZmF1bHRJdGVyYXRvcjtcbiAgICBpZiAoIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgS0lORCBpbiBJdGVyYWJsZVByb3RvdHlwZSkgcmV0dXJuIEl0ZXJhYmxlUHJvdG90eXBlW0tJTkRdO1xuICAgIHN3aXRjaCAoS0lORCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgRU5UUklFUzogcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzKTsgfTtcbiAgfTtcblxuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IGZhbHNlO1xuICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVJdGVyYXRvciA9IEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXVxuICAgIHx8IEl0ZXJhYmxlUHJvdG90eXBlWydAQGl0ZXJhdG9yJ11cbiAgICB8fCBERUZBVUxUICYmIEl0ZXJhYmxlUHJvdG90eXBlW0RFRkFVTFRdO1xuICB2YXIgZGVmYXVsdEl0ZXJhdG9yID0gIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgbmF0aXZlSXRlcmF0b3IgfHwgZ2V0SXRlcmF0aW9uTWV0aG9kKERFRkFVTFQpO1xuICB2YXIgYW55TmF0aXZlSXRlcmF0b3IgPSBOQU1FID09ICdBcnJheScgPyBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzIHx8IG5hdGl2ZUl0ZXJhdG9yIDogbmF0aXZlSXRlcmF0b3I7XG4gIHZhciBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIG1ldGhvZHMsIEtFWTtcblxuICAvLyBmaXggbmF0aXZlXG4gIGlmIChhbnlOYXRpdmVJdGVyYXRvcikge1xuICAgIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGFueU5hdGl2ZUl0ZXJhdG9yLmNhbGwobmV3IEl0ZXJhYmxlKCkpKTtcbiAgICBpZiAoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzQ2FsbGFibGUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSkpIHtcbiAgICAgICAgICBkZWZpbmVCdWlsdEluKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHRydWUsIHRydWUpO1xuICAgICAgaWYgKElTX1BVUkUpIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gICAgfVxuICB9XG5cbiAgLy8gZml4IEFycmF5LnByb3RvdHlwZS57IHZhbHVlcywgQEBpdGVyYXRvciB9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgREVGQVVMVCA9PSBWQUxVRVMgJiYgbmF0aXZlSXRlcmF0b3IgJiYgbmF0aXZlSXRlcmF0b3IubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgaWYgKCFJU19QVVJFICYmIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsICduYW1lJywgVkFMVUVTKTtcbiAgICB9IGVsc2Uge1xuICAgICAgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gdHJ1ZTtcbiAgICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIGNhbGwobmF0aXZlSXRlcmF0b3IsIHRoaXMpOyB9O1xuICAgIH1cbiAgfVxuXG4gIC8vIGV4cG9ydCBhZGRpdGlvbmFsIG1ldGhvZHNcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBnZXRJdGVyYXRpb25NZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/IGRlZmF1bHRJdGVyYXRvciA6IGdldEl0ZXJhdGlvbk1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChFTlRSSUVTKVxuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChLRVkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIHx8ICEoS0VZIGluIEl0ZXJhYmxlUHJvdG90eXBlKSkge1xuICAgICAgICBkZWZpbmVCdWlsdEluKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgLy8gZGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUlTX1BVUkUgfHwgRk9SQ0VEKSAmJiBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl0gIT09IGRlZmF1bHRJdGVyYXRvcikge1xuICAgIGRlZmluZUJ1aWx0SW4oSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IsIHsgbmFtZTogREVGQVVMVCB9KTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJWAgb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWtleXMgLS0gc2FmZSAqL1xuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG52YXIgTkVXX0lURVJBVE9SX1BST1RPVFlQRSA9ICFpc09iamVjdChJdGVyYXRvclByb3RvdHlwZSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdGVzdCA9IHt9O1xuICAvLyBGRjQ0LSBsZWdhY3kgaXRlcmF0b3JzIGNhc2VcbiAgcmV0dXJuIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXS5jYWxsKHRlc3QpICE9PSB0ZXN0O1xufSk7XG5cbmlmIChORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuZWxzZSBpZiAoSVNfUFVSRSkgSXRlcmF0b3JQcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1AQGl0ZXJhdG9yXG5pZiAoIWlzQ2FsbGFibGUoSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdKSkge1xuICBkZWZpbmVCdWlsdEluKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBMZW5ndGhPZkFycmF5TGlrZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWxlbmd0aG9mYXJyYXlsaWtlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHRvTGVuZ3RoKG9iai5sZW5ndGgpO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLkNPTkZJR1VSQUJMRTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyICRTdHJpbmcgPSBTdHJpbmc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG52YXIgQ09ORklHVVJBQkxFX0xFTkdUSCA9IERFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sICdsZW5ndGgnLCB7IHZhbHVlOiA4IH0pLmxlbmd0aCAhPT0gODtcbn0pO1xuXG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbnZhciBtYWtlQnVpbHRJbiA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChzdHJpbmdTbGljZSgkU3RyaW5nKG5hbWUpLCAwLCA3KSA9PT0gJ1N5bWJvbCgnKSB7XG4gICAgbmFtZSA9ICdbJyArIHJlcGxhY2UoJFN0cmluZyhuYW1lKSwgL15TeW1ib2xcXCgoW14pXSopXFwpLywgJyQxJykgKyAnXSc7XG4gIH1cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nZXR0ZXIpIG5hbWUgPSAnZ2V0ICcgKyBuYW1lO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNldHRlcikgbmFtZSA9ICdzZXQgJyArIG5hbWU7XG4gIGlmICghaGFzT3duKHZhbHVlLCAnbmFtZScpIHx8IChDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSAmJiB2YWx1ZS5uYW1lICE9PSBuYW1lKSkge1xuICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkodmFsdWUsICduYW1lJywgeyB2YWx1ZTogbmFtZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAgIGVsc2UgdmFsdWUubmFtZSA9IG5hbWU7XG4gIH1cbiAgaWYgKENPTkZJR1VSQUJMRV9MRU5HVEggJiYgb3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgJ2FyaXR5JykgJiYgdmFsdWUubGVuZ3RoICE9PSBvcHRpb25zLmFyaXR5KSB7XG4gICAgZGVmaW5lUHJvcGVydHkodmFsdWUsICdsZW5ndGgnLCB7IHZhbHVlOiBvcHRpb25zLmFyaXR5IH0pO1xuICB9XG4gIHRyeSB7XG4gICAgaWYgKG9wdGlvbnMgJiYgaGFzT3duKG9wdGlvbnMsICdjb25zdHJ1Y3RvcicpICYmIG9wdGlvbnMuY29uc3RydWN0b3IpIHtcbiAgICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkodmFsdWUsICdwcm90b3R5cGUnLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTtcbiAgICAvLyBpbiBWOCB+IENocm9tZSA1MywgcHJvdG90eXBlcyBvZiBzb21lIG1ldGhvZHMsIGxpa2UgYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgLCBhcmUgbm9uLXdyaXRhYmxlXG4gICAgfSBlbHNlIGlmICh2YWx1ZS5wcm90b3R5cGUpIHZhbHVlLnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICB2YXIgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSk7XG4gIGlmICghaGFzT3duKHN0YXRlLCAnc291cmNlJykpIHtcbiAgICBzdGF0ZS5zb3VyY2UgPSBqb2luKFRFTVBMQVRFLCB0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJyA/IG5hbWUgOiAnJyk7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcblxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0ZW5kLW5hdGl2ZSAtLSByZXF1aXJlZFxuRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gbWFrZUJ1aWx0SW4oZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKHRoaXMpICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59LCAndG9TdHJpbmcnKTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYE1hdGgudHJ1bmNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnRydW5jXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC10cnVuYyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgudHJ1bmMgfHwgZnVuY3Rpb24gdHJ1bmMoeCkge1xuICB2YXIgbiA9ICt4O1xuICByZXR1cm4gKG4gPiAwID8gZmxvb3IgOiBjZWlsKShuKTtcbn07XG4iLCIvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUsIFdTSCAqL1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCdcbiAgICA/IGRvY3VtZW50LmRvbWFpbiAmJiBhY3RpdmVYRG9jdW1lbnRcbiAgICAgID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIC8vIG9sZCBJRVxuICAgICAgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKVxuICAgIDogTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpOyAvLyBXU0hcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWNyZWF0ZSAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHlDb25zdHJ1Y3RvcigpO1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gTnVsbFByb3RvT2JqZWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlLmYocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1ZycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnRpZXMgLS0gc2FmZVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgJiYgIVY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBwcm9wc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1ZycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIEVOVU1FUkFCTEUgPSAnZW51bWVyYWJsZSc7XG52YXIgQ09ORklHVVJBQkxFID0gJ2NvbmZpZ3VyYWJsZSc7XG52YXIgV1JJVEFCTEUgPSAnd3JpdGFibGUnO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID8gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAodHlwZW9mIE8gPT09ICdmdW5jdGlvbicgJiYgUCA9PT0gJ3Byb3RvdHlwZScgJiYgJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzICYmIFdSSVRBQkxFIGluIEF0dHJpYnV0ZXMgJiYgIUF0dHJpYnV0ZXNbV1JJVEFCTEVdKSB7XG4gICAgdmFyIGN1cnJlbnQgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnRbV1JJVEFCTEVdKSB7XG4gICAgICBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogQ09ORklHVVJBQkxFIGluIEF0dHJpYnV0ZXMgPyBBdHRyaWJ1dGVzW0NPTkZJR1VSQUJMRV0gOiBjdXJyZW50W0NPTkZJR1VSQUJMRV0sXG4gICAgICAgIGVudW1lcmFibGU6IEVOVU1FUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbRU5VTUVSQUJMRV0gOiBjdXJyZW50W0VOVU1FUkFCTEVdLFxuICAgICAgICB3cml0YWJsZTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9IHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG59IDogJGRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyAkVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhc093bihPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighY2FsbChwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLCBPLCBQKSwgT1tQXSk7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZSAqL1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGFycmF5U2xpY2Uod2luZG93TmFtZXMpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgY2xhc3NvZihpdCkgPT0gJ1dpbmRvdydcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogJGdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSBzYWZlXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwidmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgJE9iamVjdCA9IE9iamVjdDtcbnZhciBPYmplY3RQcm90b3R5cGUgPSAkT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/ICRPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICB2YXIgb2JqZWN0ID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXNPd24ob2JqZWN0LCBJRV9QUk9UTykpIHJldHVybiBvYmplY3RbSUVfUFJPVE9dO1xuICB2YXIgY29uc3RydWN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIGlmIChpc0NhbGxhYmxlKGNvbnN0cnVjdG9yKSAmJiBvYmplY3QgaW5zdGFuY2VvZiBjb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mICRPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyh7fS5pc1Byb3RvdHlwZU9mKTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhc093bihoaWRkZW5LZXlzLCBrZXkpICYmIGhhc093bihPLCBrZXkpICYmIHB1c2gocmVzdWx0LCBrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzT3duKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHB1c2gocmVzdWx0LCBrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qta2V5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgISRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvIC0tIHNhZmUgKi9cbnZhciB1bmN1cnJ5VGhpc0FjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1hY2Nlc3NvcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qtc2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICBzZXR0ZXIgPSB1bmN1cnJ5VGhpc0FjY2Vzc29yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nLCAnc2V0Jyk7XG4gICAgc2V0dGVyKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IHt9LnRvU3RyaW5nIDogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn07XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYE9yZGluYXJ5VG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vcmRpbmFyeXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKHByZWYgPT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChpc0NhbGxhYmxlKGZuID0gaW5wdXQudmFsdWVPZikgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChwcmVmICE9PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyAkVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGNvbmNhdChrZXlzLCBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG4iLCJ2YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKGl0KSkgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIFRBRywgU1RBVElDKSB7XG4gIGlmICh0YXJnZXQgJiYgIVNUQVRJQykgdGFyZ2V0ID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgaWYgKHRhcmdldCAmJiAhaGFzT3duKHRhcmdldCwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBkZWZpbmVHbG9iYWxQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5Jyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IGRlZmluZUdsb2JhbFByb3BlcnR5KFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMzAuMicsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxNC0yMDIzIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJyxcbiAgbGljZW5zZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2Jsb2IvdjMuMzAuMi9MSUNFTlNFJyxcbiAgc291cmNlOiAnaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMnXG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoQ09OVkVSVF9UT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgcG9zKSB7XG4gICAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyT3JJbmZpbml0eShwb3MpO1xuICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBmaXJzdCA9IGNoYXJDb2RlQXQoUywgcG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HXG4gICAgICAgICAgPyBjaGFyQXQoUywgcG9zaXRpb24pXG4gICAgICAgICAgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HXG4gICAgICAgICAgPyBzdHJpbmdTbGljZShTLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAyKVxuICAgICAgICAgIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ15bJyArIHdoaXRlc3BhY2VzICsgJ10rJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoJyhefFteJyArIHdoaXRlc3BhY2VzICsgJ10pWycgKyB3aGl0ZXNwYWNlcyArICddKyQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltLCB0cmltU3RhcnQsIHRyaW1FbmQsIHRyaW1MZWZ0LCB0cmltUmlnaHQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMpIHtcbiAgICB2YXIgc3RyaW5nID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIGlmIChUWVBFICYgMSkgc3RyaW5nID0gcmVwbGFjZShzdHJpbmcsIGx0cmltLCAnJyk7XG4gICAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSByZXBsYWNlKHN0cmluZywgcnRyaW0sICckMScpO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltTGVmdCwgdHJpbVN0YXJ0IH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiAgdHJpbTogY3JlYXRlTWV0aG9kKDMpXG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgJFN0cmluZyA9IGdsb2JhbC5TdHJpbmc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGBnZXQtb3duLXByb3BlcnR5LXN5bWJvbHNgIHBvbHlmaWxsIHN5bWJvbHMgY29udmVydGVkIHRvIG9iamVjdCBhcmUgbm90IFN5bWJvbCBpbnN0YW5jZXNcbiAgLy8gbmI6IERvIG5vdCBjYWxsIGBTdHJpbmdgIGRpcmVjdGx5IHRvIGF2b2lkIHRoaXMgYmVpbmcgb3B0aW1pemVkIG91dCB0byBgc3ltYm9sKycnYCB3aGljaCB3aWxsLFxuICAvLyBvZiBjb3Vyc2UsIGZhaWwuXG4gIHJldHVybiAhJFN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8XG4gICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiAmJiBWOF9WRVJTSU9OIDwgNDE7XG59KTtcbiIsInZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7XG4gIHZhciBTeW1ib2xQcm90b3R5cGUgPSBTeW1ib2wgJiYgU3ltYm9sLnByb3RvdHlwZTtcbiAgdmFyIHZhbHVlT2YgPSBTeW1ib2xQcm90b3R5cGUgJiYgU3ltYm9sUHJvdG90eXBlLnZhbHVlT2Y7XG4gIHZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG5cbiAgaWYgKFN5bWJvbFByb3RvdHlwZSAmJiAhU3ltYm9sUHJvdG90eXBlW1RPX1BSSU1JVElWRV0pIHtcbiAgICAvLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIC5sZW5ndGhcbiAgICBkZWZpbmVCdWlsdEluKFN5bWJvbFByb3RvdHlwZSwgVE9fUFJJTUlUSVZFLCBmdW5jdGlvbiAoaGludCkge1xuICAgICAgcmV0dXJuIGNhbGwodmFsdWVPZiwgdGhpcyk7XG4gICAgfSwgeyBhcml0eTogMSB9KTtcbiAgfVxufTtcbiIsInZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcblxuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHNhZmUgKi9cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTCAmJiAhIVN5bWJvbFsnZm9yJ10gJiYgISFTeW1ib2wua2V5Rm9yO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG4vLyBgdGhpc051bWJlclZhbHVlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdGhpc251bWJlcnZhbHVlXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKDEuMC52YWx1ZU9mKTtcbiIsInZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgdHJ1bmMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC10cnVuYycpO1xuXG4vLyBgVG9JbnRlZ2VyT3JJbmZpbml0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvaW50ZWdlcm9yaW5maW5pdHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBudW1iZXIgPSArYXJndW1lbnQ7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHJldHVybiBudW1iZXIgIT09IG51bWJlciB8fCBudW1iZXIgPT09IDAgPyAwIDogdHJ1bmMobnVtYmVyKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiAkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSB8fCBpc1N5bWJvbChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGV4b3RpY1RvUHJpbSA9IGdldE1ldGhvZChpbnB1dCwgVE9fUFJJTUlUSVZFKTtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKGV4b3RpY1RvUHJpbSkge1xuICAgIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnZGVmYXVsdCc7XG4gICAgcmVzdWx0ID0gY2FsbChleG90aWNUb1ByaW0sIGlucHV0LCBwcmVmKTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlc3VsdCkgfHwgaXNTeW1ib2wocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICB0aHJvdyAkVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuICB9XG4gIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnbnVtYmVyJztcbiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIHByZWYpO1xufTtcbiIsInZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcblxuLy8gYFRvUHJvcGVydHlLZXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTtcbiAgcmV0dXJuIGlzU3ltYm9sKGtleSkgPyBrZXkgOiBrZXkgKyAnJztcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxudmFyICRTdHJpbmcgPSBTdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChjbGFzc29mKGFyZ3VtZW50KSA9PT0gJ1N5bWJvbCcpIHRocm93IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBzdHJpbmcnKTtcbiAgcmV0dXJuICRTdHJpbmcoYXJndW1lbnQpO1xufTtcbiIsInZhciAkU3RyaW5nID0gU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB0cnkge1xuICAgIHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gJ09iamVjdCc7XG4gIH1cbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyB0b1N0cmluZygrK2lkICsgcG9zdGZpeCwgMzYpO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgJiYgIVN5bWJvbC5zaGFtXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBWOCB+IENocm9tZSAzNi1cbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMzMzRcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAncHJvdG90eXBlJywge1xuICAgIHZhbHVlOiA0MixcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSkucHJvdG90eXBlICE9IDQyO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0NhbGxhYmxlKFdlYWtNYXApICYmIC9uYXRpdmUgY29kZS8udGVzdChTdHJpbmcoV2Vha01hcCkpO1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgdmFyIFN5bWJvbCA9IHBhdGguU3ltYm9sIHx8IChwYXRoLlN5bWJvbCA9IHt9KTtcbiAgaWYgKCFoYXNPd24oU3ltYm9sLCBOQU1FKSkgZGVmaW5lUHJvcGVydHkoU3ltYm9sLCBOQU1FLCB7XG4gICAgdmFsdWU6IHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZihOQU1FKVxuICB9KTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbmV4cG9ydHMuZiA9IHdlbGxLbm93blN5bWJvbDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2xbJ2ZvciddIHx8IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXNPd24oV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSkge1xuICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IE5BVElWRV9TWU1CT0wgJiYgaGFzT3duKFN5bWJvbCwgbmFtZSlcbiAgICAgID8gU3ltYm9sW25hbWVdXG4gICAgICA6IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTtcbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsIi8vIGEgc3RyaW5nIG9mIGFsbCB2YWxpZCB1bmljb2RlIHdoaXRlc3BhY2VzXG5tb2R1bGUuZXhwb3J0cyA9ICdcXHUwMDA5XFx1MDAwQVxcdTAwMEJcXHUwMDBDXFx1MDAwRFxcdTAwMjBcXHUwMEEwXFx1MTY4MFxcdTIwMDBcXHUyMDAxXFx1MjAwMicgK1xuICAnXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1kZWZpbmUnKTtcbnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgQVJSQVlfSVRFUkFUT1IgPSAnQXJyYXkgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoQVJSQVlfSVRFUkFUT1IpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZW50cmllc1xuLy8gYEFycmF5LnByb3RvdHlwZS5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnZhbHVlc1xuLy8gYEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4vLyBgQ3JlYXRlQXJyYXlJdGVyYXRvcmAgaW50ZXJuYWwgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVhcnJheWl0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciB0YXJnZXQgPSBzdGF0ZS50YXJnZXQ7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgrKztcbiAgaWYgKCF0YXJnZXQgfHwgaW5kZXggPj0gdGFyZ2V0Lmxlbmd0aCkge1xuICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoaW5kZXgsIGZhbHNlKTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHRhcmdldFtpbmRleF0sIGZhbHNlKTtcbiAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoW2luZGV4LCB0YXJnZXRbaW5kZXhdXSwgZmFsc2UpO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0XG52YXIgdmFsdWVzID0gSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cbi8vIFY4IH4gQ2hyb21lIDQ1LSBidWdcbmlmICghSVNfUFVSRSAmJiBERVNDUklQVE9SUyAmJiB2YWx1ZXMubmFtZSAhPT0gJ3ZhbHVlcycpIHRyeSB7XG4gIGRlZmluZVByb3BlcnR5KHZhbHVlcywgJ25hbWUnLCB7IHZhbHVlOiAndmFsdWVzJyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiIsInZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGF0ZVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RhdGUtdG8tcHJpbWl0aXZlJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5pZiAoIWhhc093bihEYXRlUHJvdG90eXBlLCBUT19QUklNSVRJVkUpKSB7XG4gIGRlZmluZUJ1aWx0SW4oRGF0ZVByb3RvdHlwZSwgVE9fUFJJTUlUSVZFLCBkYXRlVG9QcmltaXRpdmUpO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcbnZhciBnZXRSZXBsYWNlckZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1qc29uLXJlcGxhY2VyLWZ1bmN0aW9uJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcygvLi8uZXhlYyk7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIG51bWJlclRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcblxudmFyIHRlc3RlciA9IC9bXFx1RDgwMC1cXHVERkZGXS9nO1xudmFyIGxvdyA9IC9eW1xcdUQ4MDAtXFx1REJGRl0kLztcbnZhciBoaSA9IC9eW1xcdURDMDAtXFx1REZGRl0kLztcblxudmFyIFdST05HX1NZTUJPTFNfQ09OVkVSU0lPTiA9ICFOQVRJVkVfU1lNQk9MIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN5bWJvbCA9IGdldEJ1aWx0SW4oJ1N5bWJvbCcpKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIHJldHVybiAkc3RyaW5naWZ5KFtzeW1ib2xdKSAhPSAnW251bGxdJ1xuICAgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAgIHx8ICRzdHJpbmdpZnkoeyBhOiBzeW1ib2wgfSkgIT0gJ3t9J1xuICAgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gICAgfHwgJHN0cmluZ2lmeShPYmplY3Qoc3ltYm9sKSkgIT0gJ3t9Jztcbn0pO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC13ZWxsLWZvcm1lZC1zdHJpbmdpZnlcbnZhciBJTExfRk9STUVEX1VOSUNPREUgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkc3RyaW5naWZ5KCdcXHVERjA2XFx1RDgzNCcpICE9PSAnXCJcXFxcdWRmMDZcXFxcdWQ4MzRcIidcbiAgICB8fCAkc3RyaW5naWZ5KCdcXHVERUFEJykgIT09ICdcIlxcXFx1ZGVhZFwiJztcbn0pO1xuXG52YXIgc3RyaW5naWZ5V2l0aFN5bWJvbHNGaXggPSBmdW5jdGlvbiAoaXQsIHJlcGxhY2VyKSB7XG4gIHZhciBhcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMpO1xuICB2YXIgJHJlcGxhY2VyID0gZ2V0UmVwbGFjZXJGdW5jdGlvbihyZXBsYWNlcik7XG4gIGlmICghaXNDYWxsYWJsZSgkcmVwbGFjZXIpICYmIChpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICBhcmdzWzFdID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAvLyBzb21lIG9sZCBpbXBsZW1lbnRhdGlvbnMgKGxpa2UgV2ViS2l0KSBjb3VsZCBwYXNzIG51bWJlcnMgYXMga2V5c1xuICAgIGlmIChpc0NhbGxhYmxlKCRyZXBsYWNlcikpIHZhbHVlID0gY2FsbCgkcmVwbGFjZXIsIHRoaXMsICRTdHJpbmcoa2V5KSwgdmFsdWUpO1xuICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gIH07XG4gIHJldHVybiBhcHBseSgkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbn07XG5cbnZhciBmaXhJbGxGb3JtZWQgPSBmdW5jdGlvbiAobWF0Y2gsIG9mZnNldCwgc3RyaW5nKSB7XG4gIHZhciBwcmV2ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0IC0gMSk7XG4gIHZhciBuZXh0ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0ICsgMSk7XG4gIGlmICgoZXhlYyhsb3csIG1hdGNoKSAmJiAhZXhlYyhoaSwgbmV4dCkpIHx8IChleGVjKGhpLCBtYXRjaCkgJiYgIWV4ZWMobG93LCBwcmV2KSkpIHtcbiAgICByZXR1cm4gJ1xcXFx1JyArIG51bWJlclRvU3RyaW5nKGNoYXJDb2RlQXQobWF0Y2gsIDApLCAxNik7XG4gIH0gcmV0dXJuIG1hdGNoO1xufTtcblxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGFyaXR5OiAzLCBmb3JjZWQ6IFdST05HX1NZTUJPTFNfQ09OVkVSU0lPTiB8fCBJTExfRk9STUVEX1VOSUNPREUgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cyk7XG4gICAgICB2YXIgcmVzdWx0ID0gYXBwbHkoV1JPTkdfU1lNQk9MU19DT05WRVJTSU9OID8gc3RyaW5naWZ5V2l0aFN5bWJvbHNGaXggOiAkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbiAgICAgIHJldHVybiBJTExfRk9STUVEX1VOSUNPREUgJiYgdHlwZW9mIHJlc3VsdCA9PSAnc3RyaW5nJyA/IHJlcGxhY2UocmVzdWx0LCB0ZXN0ZXIsIGZpeElsbEZvcm1lZCkgOiByZXN1bHQ7XG4gICAgfVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIHRoaXNOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZScpO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xuXG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgTmF0aXZlTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgUHVyZU51bWJlck5hbWVzcGFjZSA9IHBhdGhbTlVNQkVSXTtcbnZhciBOdW1iZXJQcm90b3R5cGUgPSBOYXRpdmVOdW1iZXIucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xuXG4vLyBgVG9OdW1lcmljYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9udW1lcmljXG52YXIgdG9OdW1lcmljID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcmltVmFsdWUgPSB0b1ByaW1pdGl2ZSh2YWx1ZSwgJ251bWJlcicpO1xuICByZXR1cm4gdHlwZW9mIHByaW1WYWx1ZSA9PSAnYmlnaW50JyA/IHByaW1WYWx1ZSA6IHRvTnVtYmVyKHByaW1WYWx1ZSk7XG59O1xuXG4vLyBgVG9OdW1iZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b251bWJlclxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnbnVtYmVyJyk7XG4gIHZhciBmaXJzdCwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlLCBkaWdpdHMsIGxlbmd0aCwgaW5kZXgsIGNvZGU7XG4gIGlmIChpc1N5bWJvbChpdCkpIHRocm93IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBudW1iZXInKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSB0cmltKGl0KTtcbiAgICBmaXJzdCA9IGNoYXJDb2RlQXQoaXQsIDApO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGNoYXJDb2RlQXQoaXQsIDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoY2hhckNvZGVBdChpdCwgMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGRpZ2l0cyA9IHN0cmluZ1NsaWNlKGl0LCAyKTtcbiAgICAgIGxlbmd0aCA9IGRpZ2l0cy5sZW5ndGg7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29kZSA9IGNoYXJDb2RlQXQoZGlnaXRzLCBpbmRleCk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoTlVNQkVSLCAhTmF0aXZlTnVtYmVyKCcgMG8xJykgfHwgIU5hdGl2ZU51bWJlcignMGIxJykgfHwgTmF0aXZlTnVtYmVyKCcrMHgxJykpO1xuXG52YXIgY2FsbGVkV2l0aE5ldyA9IGZ1bmN0aW9uIChkdW1teSkge1xuICAvLyBpbmNsdWRlcyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgcmV0dXJuIGlzUHJvdG90eXBlT2YoTnVtYmVyUHJvdG90eXBlLCBkdW1teSkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyB0aGlzTnVtYmVyVmFsdWUoZHVtbXkpOyB9KTtcbn07XG5cbi8vIGBOdW1iZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci1jb25zdHJ1Y3RvclxudmFyIE51bWJlcldyYXBwZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiBOYXRpdmVOdW1iZXIodG9OdW1lcmljKHZhbHVlKSk7XG4gIHJldHVybiBjYWxsZWRXaXRoTmV3KHRoaXMpID8gaW5oZXJpdElmUmVxdWlyZWQoT2JqZWN0KG4pLCB0aGlzLCBOdW1iZXJXcmFwcGVyKSA6IG47XG59O1xuXG5OdW1iZXJXcmFwcGVyLnByb3RvdHlwZSA9IE51bWJlclByb3RvdHlwZTtcbmlmIChGT1JDRUQgJiYgIUlTX1BVUkUpIE51bWJlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE51bWJlcldyYXBwZXI7XG5cbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIE51bWJlcjogTnVtYmVyV3JhcHBlclxufSk7XG5cbi8vIFVzZSBgaW50ZXJuYWwvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzYCBoZWxwZXIgaW4gYGNvcmUtanNANGBcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIGZvciAodmFyIGtleXMgPSBERVNDUklQVE9SUyA/IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTMjAxNSAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTMjAxNSBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLE1BWF9TQUZFX0lOVEVHRVIsTUlOX1NBRkVfSU5URUdFUixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixwYXJzZUZsb2F0LHBhcnNlSW50LCcgK1xuICAgIC8vIEVTTmV4dFxuICAgICdmcm9tU3RyaW5nLHJhbmdlJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhc093bihzb3VyY2UsIGtleSA9IGtleXNbal0pICYmICFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfVxuICB9XG59O1xuXG5pZiAoSVNfUFVSRSAmJiBQdXJlTnVtYmVyTmFtZXNwYWNlKSBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHBhdGhbTlVNQkVSXSwgUHVyZU51bWJlck5hbWVzcGFjZSk7XG5pZiAoRk9SQ0VEIHx8IElTX1BVUkUpIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMocGF0aFtOVU1CRVJdLCBOYXRpdmVOdW1iZXIpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuZGVmaW5lUHJvcGVydHkgIT09IGRlZmluZVByb3BlcnR5LCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogZGVmaW5lUHJvcGVydHlcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG4vLyBWOCB+IENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGT1JDRUQgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyAkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRvT2JqZWN0KGl0KSkgOiBbXTtcbiAgfVxufSk7XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICghVE9fU1RSSU5HX1RBR19TVVBQT1JUKSB7XG4gIGRlZmluZUJ1aWx0SW4oT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgdG9TdHJpbmcsIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1kZWZpbmUnKTtcbnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QnKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiB0b1N0cmluZyhpdGVyYXRlZCksXG4gICAgaW5kZXg6IDBcbiAgfSk7XG4vLyBgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcbiAgcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QocG9pbnQsIGZhbHNlKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIG5hdGl2ZU9iamVjdENyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUJ1aWx0SW5BY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3InKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcbnZhciBkZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtZGVmaW5lLXRvLXByaW1pdGl2ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpO1xudmFyIFNZTUJPTCA9ICdTeW1ib2wnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpO1xuXG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgU3ltYm9sUHJvdG90eXBlID0gJFN5bWJvbCAmJiAkU3ltYm9sW1BST1RPVFlQRV07XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZjtcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvdHlwZVN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xuXG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBVU0VfU0VUVEVSID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdENyZWF0ZShuYXRpdmVEZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoTywgUCwgQXR0cmlidXRlcykge1xuICB2YXIgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIFApO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcikgZGVsZXRlIE9iamVjdFByb3RvdHlwZVtQXTtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yICYmIE8gIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZSwgUCwgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcik7XG4gIH1cbn0gOiBuYXRpdmVEZWZpbmVQcm9wZXJ0eTtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnLCBkZXNjcmlwdGlvbikge1xuICB2YXIgc3ltYm9sID0gQWxsU3ltYm9sc1t0YWddID0gbmF0aXZlT2JqZWN0Q3JlYXRlKFN5bWJvbFByb3RvdHlwZSk7XG4gIHNldEludGVybmFsU3RhdGUoc3ltYm9sLCB7XG4gICAgdHlwZTogU1lNQk9MLFxuICAgIHRhZzogdGFnLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykgc3ltYm9sLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHJldHVybiBzeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBpZiAoTyA9PT0gT2JqZWN0UHJvdG90eXBlKSAkZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCwgQXR0cmlidXRlcyk7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXNPd24oQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhc093bihPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzT3duKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKCRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgcHJvcGVydGllcywga2V5KSkgJGRlZmluZVByb3BlcnR5KE8sIGtleSwgcHJvcGVydGllc1trZXldKTtcbiAgfSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gbmF0aXZlT2JqZWN0Q3JlYXRlKE8pIDogJGRlZmluZVByb3BlcnRpZXMobmF0aXZlT2JqZWN0Q3JlYXRlKE8pLCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBQID0gdG9Qcm9wZXJ0eUtleShWKTtcbiAgdmFyIGVudW1lcmFibGUgPSBjYWxsKG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLCB0aGlzLCBQKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXNPd24oQWxsU3ltYm9scywgUCkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzT3duKHRoaXMsIFApIHx8ICFoYXNPd24oQWxsU3ltYm9scywgUCkgfHwgaGFzT3duKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdXG4gICAgPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhKGhhc093bihpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSkgcHVzaChyZXN1bHQsIGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiAoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhc093bihPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICBwdXNoKHJlc3VsdCwgQWxsU3ltYm9sc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLWNvbnN0cnVjdG9yXG5pZiAoIU5BVElWRV9TWU1CT0wpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAoaXNQcm90b3R5cGVPZihTeW1ib2xQcm90b3R5cGUsIHRoaXMpKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogJHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHRhZyA9IHVpZChkZXNjcmlwdGlvbik7XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgY2FsbChzZXR0ZXIsIE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXNPd24odGhpcywgSElEREVOKSAmJiBoYXNPd24odGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sW1BST1RPVFlQRV07XG5cbiAgZGVmaW5lQnVpbHRJbihTeW1ib2xQcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgZGVmaW5lQnVpbHRJbigkU3ltYm9sLCAnd2l0aG91dFNldHRlcicsIGZ1bmN0aW9uIChkZXNjcmlwdGlvbikge1xuICAgIHJldHVybiB3cmFwKHVpZChkZXNjcmlwdGlvbiksIGRlc2NyaXB0aW9uKTtcbiAgfSk7XG5cbiAgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgZGVmaW5lUHJvcGVydGllc01vZHVsZS5mID0gJGRlZmluZVByb3BlcnRpZXM7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoU3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIUlTX1BVUkUpIHtcbiAgICAgIGRlZmluZUJ1aWx0SW4oT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIU5BVElWRV9TWU1CT0wgfSwge1xuICBTeW1ib2w6ICRTeW1ib2xcbn0pO1xuXG4kZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiBTWU1CT0wsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gZmFsc2U7IH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lc1xufSk7XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5kZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSgpO1xuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwiLy8gYFN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcblxudmFyIE5hdGl2ZVN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgU3ltYm9sUHJvdG90eXBlID0gTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGU7XG5cbmlmIChERVNDUklQVE9SUyAmJiBpc0NhbGxhYmxlKE5hdGl2ZVN5bWJvbCkgJiYgKCEoJ2Rlc2NyaXB0aW9uJyBpbiBTeW1ib2xQcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiB0b1N0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciByZXN1bHQgPSBpc1Byb3RvdHlwZU9mKFN5bWJvbFByb3RvdHlwZSwgdGhpcylcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFN5bWJvbFdyYXBwZXIsIE5hdGl2ZVN5bWJvbCk7XG4gIFN5bWJvbFdyYXBwZXIucHJvdG90eXBlID0gU3ltYm9sUHJvdG90eXBlO1xuICBTeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBOQVRJVkVfU1lNQk9MID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgndGVzdCcpKSA9PSAnU3ltYm9sKHRlc3QpJztcbiAgdmFyIHRoaXNTeW1ib2xWYWx1ZSA9IHVuY3VycnlUaGlzKFN5bWJvbFByb3RvdHlwZS52YWx1ZU9mKTtcbiAgdmFyIHN5bWJvbERlc2NyaXB0aXZlU3RyaW5nID0gdW5jdXJyeVRoaXMoU3ltYm9sUHJvdG90eXBlLnRvU3RyaW5nKTtcbiAgdmFyIHJlZ2V4cCA9IC9eU3ltYm9sXFwoKC4qKVxcKVteKV0rJC87XG4gIHZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG4gIHZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoU3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICB2YXIgc3ltYm9sID0gdGhpc1N5bWJvbFZhbHVlKHRoaXMpO1xuICAgICAgaWYgKGhhc093bihFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUsIHN5bWJvbCkpIHJldHVybiAnJztcbiAgICAgIHZhciBzdHJpbmcgPSBzeW1ib2xEZXNjcmlwdGl2ZVN0cmluZyhzeW1ib2wpO1xuICAgICAgdmFyIGRlc2MgPSBOQVRJVkVfU1lNQk9MID8gc3RyaW5nU2xpY2Uoc3RyaW5nLCA3LCAtMSkgOiByZXBsYWNlKHN0cmluZywgcmVnZXhwLCAnJDEnKTtcbiAgICAgIHJldHVybiBkZXNjID09PSAnJyA/IHVuZGVmaW5lZCA6IGRlc2M7XG4gICAgfVxuICB9KTtcblxuICAkKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICBTeW1ib2w6IFN5bWJvbFdyYXBwZXJcbiAgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIE5BVElWRV9TWU1CT0xfUkVHSVNUUlkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLXJlZ2lzdHJ5LWRldGVjdGlvbicpO1xuXG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcblxuLy8gYFN5bWJvbC5mb3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuZm9yXG4kKHsgdGFyZ2V0OiAnU3ltYm9sJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSB9LCB7XG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKGtleSk7XG4gICAgaWYgKGhhc093bihTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgIHZhciBzeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKShzdHJpbmcpO1xuICAgIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXSA9IHN5bWJvbDtcbiAgICBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bWJvbF0gPSBzdHJpbmc7XG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfVxufSk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLml0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3Mgc3BsaXQgdG8gbW9kdWxlcyBsaXN0ZWQgYmVsb3dcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5mb3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmtleS1mb3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuanNvbi5zdHJpbmdpZnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIE5BVElWRV9TWU1CT0xfUkVHSVNUUlkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLXJlZ2lzdHJ5LWRldGVjdGlvbicpO1xuXG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xuXG4vLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiQoeyB0YXJnZXQ6ICdTeW1ib2wnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MX1JFR0lTVFJZIH0sIHtcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3IodHJ5VG9TdHJpbmcoc3ltKSArICcgaXMgbm90IGEgc3ltYm9sJyk7XG4gICAgaWYgKGhhc093bihTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5LCBzeW0pKSByZXR1cm4gU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1dO1xuICB9XG59KTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG52YXIgZGVmaW5lU3ltYm9sVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWRlZmluZS10by1wcmltaXRpdmUnKTtcblxuLy8gYFN5bWJvbC50b1ByaW1pdGl2ZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnRvcHJpbWl0aXZlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5kZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSgpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUnKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvck1ldGhvZHMudmFsdWVzO1xuXG52YXIgaGFuZGxlUHJvdG90eXBlID0gZnVuY3Rpb24gKENvbGxlY3Rpb25Qcm90b3R5cGUsIENPTExFQ1RJT05fTkFNRSkge1xuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgaWYgKCFDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUddKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgQ09MTEVDVElPTl9OQU1FKTtcbiAgICB9XG4gICAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBBcnJheUl0ZXJhdG9yTWV0aG9kcykge1xuICAgICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSkgdHJ5IHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIE1FVEhPRF9OQU1FLCBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gPSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV07XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIGhhbmRsZVByb3RvdHlwZShnbG9iYWxbQ09MTEVDVElPTl9OQU1FXSAmJiBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXS5wcm90b3R5cGUsIENPTExFQ1RJT05fTkFNRSk7XG59XG5cbmhhbmRsZVByb3RvdHlwZShET01Ub2tlbkxpc3RQcm90b3R5cGUsICdET01Ub2tlbkxpc3QnKTtcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKiB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5ib2R5IHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XFxufVxcblxcbnNwYW4ge1xcbiAgbGluZS1oZWlnaHQ6IDA7XFxufVxcblxcbi8qIENvbGxhcHNpYmxlICovXFxuXFxuLndpZGdldF9jb2xsYXBzaWJsZSwgLndpZGdldF9jaGF0IHtcXG4gIHdpZHRoOiAzMCU7XFxuICBtYXJnaW46IDFyZW0gYXV0bztcXG4gIHBhZGRpbmc6IDFyZW07XFxuICBib3JkZXI6IDFweCBkYXNoZWQgcmdiKDExNiwgMTEzLCAxMjYpO1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG5cXG4ud2lkZ2V0X2NvbnRyb2xzIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcXG59XFxuXFxuLndpZGdldF9idXR0b24ge1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGJvcmRlcjogMnB4IHNvbGlkIGRlZXBza3libHVlO1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBkZWVwc2t5Ymx1ZTtcXG4gIGNvbG9yOiB3aGl0ZTsgIFxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi53aWRnZXRfYnV0dG9uOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6IGRvZGdlcmJsdWU7XFxufSBcXG5cXG4ud2lkZ2V0X2J1dHRvbjpmb2N1cyB7XFxuICBib3JkZXI6IDJweCBzb2xpZCBhcXVhOyAgXFxufVxcblxcbi53aWRnZXRfZm9vdGVyIHsgICBcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi53aWRnZXRfZm9vdGVyX3N0cmluZyB7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgbGluZS1oZWlnaHQ6IDJyZW07XFxuICBib3JkZXI6IDFweCBzb2xpZCBsaWdodGdyZXk7ICAgXFxufVxcblxcbi5zaG93IHsgXFxuICBvcGFjaXR5OiAxO1xcbiAgbWF4LWhlaWdodDogMzB2aDtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgMC4yNXMsIG1heC1oZWlnaHQgMC41cyBzdGVwcyg1LCBlbmQpO1xcbn1cXG5cXG4uY29sbGFwc2VkIHtcXG4gIG9wYWNpdHk6IDA7XFxuICBtYXgtaGVpZ2h0OiAwcHg7IFxcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyAwLjI1cywgbWF4LWhlaWdodCAwLjVzIHN0ZXBzKDUsIGVuZCk7ICAgXFxufVxcblxcbi8qIENoYXQgKi9cXG5cXG4ud2lkZ2V0X2NoYXRfY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogMTBweDtcXG4gIHJpZ2h0OiAxMHB4O1xcbiAgd2lkdGg6IDMwJTtcXG59XFxuXFxuLndpZGdldF9yb3VuZF9idXR0b24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xcbiAgd2lkdGg6IDYwcHg7XFxuICBoZWlnaHQ6IDYwcHg7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMTBweDtcXG4gIGJvdHRvbTogMTBweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIG9wYWNpdHk6IDE7XFxuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgdHJhbnNpdGlvbjogd2lkdGggMTAwbXMgbGluZWFyLCBoZWlnaHQgMTAwbXMgbGluZWFyLCBvcGFjaXR5IDEwMG1zIGxpbmVhciwgdHJhbnNmb3JtIDEwMG1zIGxpbmVhcjtcXG59XFxuXFxuLndpZGdldF9yb3VuZF9idXR0b246aG92ZXIge1xcbiAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjIpO1xcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDEwMG1zIGxpbmVhcjtcXG59XFxuXFxuLndpZGdldF9jaGF0IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDEwcHg7XFxuICBib3R0b206IDEwcHg7IFxcbiAgbWFyZ2luOiAxcmVtO1xcbiAgb3BhY2l0eTogMTtcXG4gIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgYm90dG9tO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMTAwbXMgbGluZWFyLCB0cmFuc2Zvcm0gMTAwbXMgbGluZWFyO1xcbn1cXG5cXG4ud2lkZ2V0X2NoYXRfcmVtb3ZlIHtcXG4gIG1hcmdpbi1yaWdodDogMDtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgd2lkdGg6IDJyZW07XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBmb250LXNpemU6IDFyZW07XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLndpZGdldF9jaGF0X3JlbW92ZTpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi53aWRnZXRfY2hhdF9idXR0b24sIC53aWRnZXRfY2hhdF9pbnB1dCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1hcmdpbi10b3A6IDFyZW07XFxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbn1cXG5cXG4ud2lkZ2V0X2NoYXRfaW5wdXQge1xcbiAgcmVzaXplOiB2ZXJ0aWNhbDtcXG4gIG1pbi1oZWlnaHQ6IDEwcmVtO1xcbn1cXG5cXG4ud2lkZ2V0X2NoYXQuaGlkZSB7XFxuICB0cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIGJvdHRvbTtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICBvcGFjaXR5OiAwO1xcbiAgdHJhbnNpdGlvbjogYWxsIDEwMG1zIGxpbmVhcjtcXG59XFxuXFxuLndpZGdldF9yb3VuZF9idXR0b24uaGlkZSB7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgb3BhY2l0eTogMDtcXG4gIHRyYW5zaXRpb246IGFsbCAxMDBtcyBsaW5lYXI7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3Mvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsU0FBUztFQUNULFVBQVU7QUFDWjs7QUFFQTtFQUNFLFlBQVk7RUFDWixXQUFXO0VBQ1gseUNBQXlDO0FBQzNDOztBQUVBO0VBQ0UsY0FBYztBQUNoQjs7QUFFQSxnQkFBZ0I7O0FBRWhCO0VBQ0UsVUFBVTtFQUNWLGlCQUFpQjtFQUNqQixhQUFhO0VBQ2IscUNBQXFDO0VBQ3JDLG1CQUFtQjtFQUNuQixzQkFBc0I7RUFDdEIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLDZCQUE2QjtFQUM3QixtQkFBbUI7RUFDbkIsc0JBQXNCO0VBQ3RCLDZCQUE2QjtFQUM3QixZQUFZO0VBQ1osaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsZUFBZTtFQUNmLDRCQUE0QjtBQUM5Qjs7QUFFQTtFQUNFLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixpQkFBaUI7RUFDakIsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0UsVUFBVTtFQUNWLGdCQUFnQjtFQUNoQiw4REFBOEQ7QUFDaEU7O0FBRUE7RUFDRSxVQUFVO0VBQ1YsZUFBZTtFQUNmLDhEQUE4RDtBQUNoRTs7QUFFQSxTQUFTOztBQUVUO0VBQ0Usa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixXQUFXO0VBQ1gsVUFBVTtBQUNaOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLFdBQVc7RUFDWCxZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsWUFBWTtFQUNaLGVBQWU7RUFDZixVQUFVO0VBQ1Ysd0JBQXdCO0VBQ3hCLG1CQUFtQjtFQUNuQixpR0FBaUc7QUFDbkc7O0FBRUE7RUFDRSx3QkFBd0I7RUFDeEIscUJBQXFCO0VBQ3JCLGtDQUFrQztBQUNwQzs7QUFFQTtFQUNFLFdBQVc7RUFDWCxrQkFBa0I7RUFDbEIsV0FBVztFQUNYLFlBQVk7RUFDWixZQUFZO0VBQ1osVUFBVTtFQUNWLDZCQUE2QjtFQUM3QixtQkFBbUI7RUFDbkIsd0RBQXdEO0FBQzFEOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixXQUFXO0VBQ1gsa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsV0FBVztFQUNYLGdCQUFnQjtFQUNoQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsNkJBQTZCO0VBQzdCLG1CQUFtQjtFQUNuQixVQUFVO0VBQ1YsNEJBQTRCO0FBQzlCOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLFVBQVU7RUFDViw0QkFBNEI7QUFDOUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5ib2R5IHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XFxufVxcblxcbnNwYW4ge1xcbiAgbGluZS1oZWlnaHQ6IDA7XFxufVxcblxcbi8qIENvbGxhcHNpYmxlICovXFxuXFxuLndpZGdldF9jb2xsYXBzaWJsZSwgLndpZGdldF9jaGF0IHtcXG4gIHdpZHRoOiAzMCU7XFxuICBtYXJnaW46IDFyZW0gYXV0bztcXG4gIHBhZGRpbmc6IDFyZW07XFxuICBib3JkZXI6IDFweCBkYXNoZWQgcmdiKDExNiwgMTEzLCAxMjYpO1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG5cXG4ud2lkZ2V0X2NvbnRyb2xzIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcXG59XFxuXFxuLndpZGdldF9idXR0b24ge1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGJvcmRlcjogMnB4IHNvbGlkIGRlZXBza3libHVlO1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBkZWVwc2t5Ymx1ZTtcXG4gIGNvbG9yOiB3aGl0ZTsgIFxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi53aWRnZXRfYnV0dG9uOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6IGRvZGdlcmJsdWU7XFxufSBcXG5cXG4ud2lkZ2V0X2J1dHRvbjpmb2N1cyB7XFxuICBib3JkZXI6IDJweCBzb2xpZCBhcXVhOyAgXFxufVxcblxcbi53aWRnZXRfZm9vdGVyIHsgICBcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi53aWRnZXRfZm9vdGVyX3N0cmluZyB7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgbGluZS1oZWlnaHQ6IDJyZW07XFxuICBib3JkZXI6IDFweCBzb2xpZCBsaWdodGdyZXk7ICAgXFxufVxcblxcbi5zaG93IHsgXFxuICBvcGFjaXR5OiAxO1xcbiAgbWF4LWhlaWdodDogMzB2aDtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgMC4yNXMsIG1heC1oZWlnaHQgMC41cyBzdGVwcyg1LCBlbmQpO1xcbn1cXG5cXG4uY29sbGFwc2VkIHtcXG4gIG9wYWNpdHk6IDA7XFxuICBtYXgtaGVpZ2h0OiAwcHg7IFxcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyAwLjI1cywgbWF4LWhlaWdodCAwLjVzIHN0ZXBzKDUsIGVuZCk7ICAgXFxufVxcblxcbi8qIENoYXQgKi9cXG5cXG4ud2lkZ2V0X2NoYXRfY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogMTBweDtcXG4gIHJpZ2h0OiAxMHB4O1xcbiAgd2lkdGg6IDMwJTtcXG59XFxuXFxuLndpZGdldF9yb3VuZF9idXR0b24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xcbiAgd2lkdGg6IDYwcHg7XFxuICBoZWlnaHQ6IDYwcHg7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMTBweDtcXG4gIGJvdHRvbTogMTBweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIG9wYWNpdHk6IDE7XFxuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgdHJhbnNpdGlvbjogd2lkdGggMTAwbXMgbGluZWFyLCBoZWlnaHQgMTAwbXMgbGluZWFyLCBvcGFjaXR5IDEwMG1zIGxpbmVhciwgdHJhbnNmb3JtIDEwMG1zIGxpbmVhcjtcXG59XFxuXFxuLndpZGdldF9yb3VuZF9idXR0b246aG92ZXIge1xcbiAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjIpO1xcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDEwMG1zIGxpbmVhcjtcXG59XFxuXFxuLndpZGdldF9jaGF0IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDEwcHg7XFxuICBib3R0b206IDEwcHg7IFxcbiAgbWFyZ2luOiAxcmVtO1xcbiAgb3BhY2l0eTogMTtcXG4gIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgYm90dG9tO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMTAwbXMgbGluZWFyLCB0cmFuc2Zvcm0gMTAwbXMgbGluZWFyO1xcbn1cXG5cXG4ud2lkZ2V0X2NoYXRfcmVtb3ZlIHtcXG4gIG1hcmdpbi1yaWdodDogMDtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgd2lkdGg6IDJyZW07XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBmb250LXNpemU6IDFyZW07XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLndpZGdldF9jaGF0X3JlbW92ZTpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi53aWRnZXRfY2hhdF9idXR0b24sIC53aWRnZXRfY2hhdF9pbnB1dCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1hcmdpbi10b3A6IDFyZW07XFxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbn1cXG5cXG4ud2lkZ2V0X2NoYXRfaW5wdXQge1xcbiAgcmVzaXplOiB2ZXJ0aWNhbDtcXG4gIG1pbi1oZWlnaHQ6IDEwcmVtO1xcbn1cXG5cXG4ud2lkZ2V0X2NoYXQuaGlkZSB7XFxuICB0cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIGJvdHRvbTtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICBvcGFjaXR5OiAwO1xcbiAgdHJhbnNpdGlvbjogYWxsIDEwMG1zIGxpbmVhcjtcXG59XFxuXFxuLndpZGdldF9yb3VuZF9idXR0b24uaGlkZSB7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgb3BhY2l0eTogMDtcXG4gIHRyYW5zaXRpb246IGFsbCAxMDBtcyBsaW5lYXI7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbGxhcHNpYmxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbl9jb250YWluZXInKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRhaW5lcikgcmV0dXJuO1xuICAgIGNvbnN0IHNlZU1vcmVIVE1MID0gYFxuICAgIDxkaXYgY2xhc3M9XCJ3aWRnZXQgd2lkZ2V0X2NvbGxhcHNpYmxlXCI+ICAgICAgIFxuICAgICAgPGRpdiBjbGFzcz1cIndpZGdldF9jb250cm9sc1wiPiBcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cIndpZGdldF9idXR0b25cIj5TZWUgbW9yZTwvYnV0dG9uPiBcbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIndpZGdldF9mb290ZXIgY29sbGFwc2VkXCI+ICAgICAgICAgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ3aWRnZXRfZm9vdGVyX3N0cmluZ1wiPlxuICAgICAgICDQn9C+0LTQvtCx0L3Ri9C5INCy0LjQtNC20LXRgiDQtdGB0YLRjCDQsiDRgNCw0LzQutCw0YUgQm9vdHN0cmFwLCDQvdC+INC60LDQuiDQvNGLINGBINCy0LDQvNC4IFwi0LfQvdCw0LXQvFwiOiBcImpRdWVyeSDQvdC1INC90YPQttC10L1cIiwg0L/QvtGN0YLQvtC80YMg0LLQsNC8INC90YPQttC90L4g0YDQtdCw0LvQuNC30L7QstCw0YLRjCDRgtCw0LrQvtC5INC20LUg0LLQuNC00LbQtdGCINC90LAg0YfQuNGB0YLQvtC8IEpTLlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PiBcbiAgICA8L2Rpdj5gO1xuICAgIHRoaXMuY29udGFpbmVyLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlRW5kJywgc2VlTW9yZUhUTUwpO1xuICAgIGNvbnN0IGJ0blRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2lkZ2V0X2J1dHRvbicpO1xuICAgIHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy53aWRnZXRfY29sbGFwc2libGUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICBpZiAoZS50YXJnZXQgIT09IGJ0blRleHQpIHJldHVybjtcbiAgICAgIGJ0blRleHQudGV4dENvbnRlbnQgPSBidG5UZXh0LnRleHRDb250ZW50ID09PSAnQ29sbGFwc2UnID8gJ1NlZSBtb3JlJyA6ICdDb2xsYXBzZSc7XG4gICAgICBjb25zdCB3aWRnZXRGb290ZXIgPSBlLmN1cnJlbnRUYXJnZXQucXVlcnlTZWxlY3RvcignLndpZGdldF9mb290ZXInKTtcbiAgICAgIHdpZGdldEZvb3Rlci5jbGFzc0xpc3QudG9nZ2xlKCdjb2xsYXBzZWQnKTtcbiAgICAgIHdpZGdldEZvb3Rlci5jbGFzc0xpc3QudG9nZ2xlKCdzaG93Jyk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFdpZGdldENoYXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluX2NvbnRhaW5lcicpO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuY29udGFpbmVyKSByZXR1cm47XG4gICAgY29uc3QgY2hhdEh0bWwgPSBgXG4gICAgPGRpdiBjbGFzcz1cIndpZGdldF9jaGF0X2NvbnRhaW5lclwiPlxuICAgICAgPGRpdiBjbGFzcz1cIndpZGdldF9yb3VuZF9idXR0b25cIj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIndpZGdldCB3aWRnZXRfY2hhdCBoaWRlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ3aWRnZXRfY2hhdF9yZW1vdmVcIj5cbiAgICAgICAgICAmdGltZXM7XG4gICAgICAgIDwvZGl2PiBcbiAgICAgICAgPGgyPtCd0LDQv9C40YjQuNGC0LUg0L3QsNC8PC9oMj5cbiAgICAgICAgPGZvcm0gY2xhc3M9XCJ3aWRnZXRfY2hhdF9mb3JtXCI+ICBcbiAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJ3aWRnZXRfY2hhdF9pbnB1dFwiPjwvdGV4dGFyZWE+ICAgICAgICAgICBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwid2lkZ2V0X2NvbnRyb2xzIHdpZGdldF9jaGF0X2NvbnRyb2xzXCI+IFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cIndpZGdldF9idXR0b24gd2lkZ2V0X2NoYXRfYnV0dG9uXCI+0J7RgtC/0YDQsNCy0LjRgtGMPC9idXR0b24+IFxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5gO1xuXG4gICAgdGhpcy5jb250YWluZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVFbmQnLCBjaGF0SHRtbCk7XG5cbiAgICB0aGlzLmNoYXRXaWRnZXRDb250YWluZXIgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcud2lkZ2V0X2NoYXRfY29udGFpbmVyJyk7XG4gICAgdGhpcy5jaGF0V2lkZ2V0QnV0dG9uID0gdGhpcy5jaGF0V2lkZ2V0Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy53aWRnZXRfcm91bmRfYnV0dG9uJyk7XG4gICAgdGhpcy5jaGF0V2lkZ2V0V2luZG93ID0gdGhpcy5jaGF0V2lkZ2V0Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy53aWRnZXRfY2hhdCcpO1xuICAgIHRoaXMuY2hhdFdpZGdldFdpbmRvd0Nsb3NlQnRuID0gdGhpcy5jaGF0V2lkZ2V0V2luZG93LnF1ZXJ5U2VsZWN0b3IoJy53aWRnZXRfY2hhdF9yZW1vdmUnKTtcblxuICAgIHRoaXMuY2hhdFdpZGdldEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldikgPT4ge1xuICAgICAgZXYudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2hpZGUnKTtcbiAgICAgIHRoaXMuY2hhdFdpZGdldFdpbmRvdy5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmNoYXRXaWRnZXRXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuY2hhdFdpZGdldFdpbmRvdy5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XG4gICAgICB0aGlzLmNoYXRXaWRnZXRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZScpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jaGF0V2lkZ2V0V2luZG93Q2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLmNoYXRXaWRnZXRXaW5kb3cuY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xuICAgICAgdGhpcy5jaGF0V2lkZ2V0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IENvbGxhcHNlIGZyb20gJy4vd2lkZ2V0cy9jb2xsYXBzZSc7XG5pbXBvcnQgQ2hhdCBmcm9tICcuL3dpZGdldHMvY2hhdCc7XG5pbXBvcnQgJy4uL2Nzcy9zdHlsZS5jc3MnO1xuXG5jb25zdCBjb2xsYXBzZVdpZGdldCA9IG5ldyBDb2xsYXBzZSgpO1xuY29uc3QgY2hhdFdpZGdldCA9IG5ldyBDaGF0KCk7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gIGNvbGxhcHNlV2lkZ2V0LmluaXQoKTtcbiAgY2hhdFdpZGdldC5pbml0KCk7XG59KTtcbiJdLCJuYW1lcyI6WyJpc0NhbGxhYmxlIiwidHJ5VG9TdHJpbmciLCIkVHlwZUVycm9yIiwiVHlwZUVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsImFyZ3VtZW50IiwiJFN0cmluZyIsIlN0cmluZyIsIndlbGxLbm93blN5bWJvbCIsImNyZWF0ZSIsImRlZmluZVByb3BlcnR5IiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvdHlwZSIsIkFycmF5IiwicHJvdG90eXBlIiwidW5kZWZpbmVkIiwiY29uZmlndXJhYmxlIiwidmFsdWUiLCJrZXkiLCJpc09iamVjdCIsInRvSW5kZXhlZE9iamVjdCIsInRvQWJzb2x1dGVJbmRleCIsImxlbmd0aE9mQXJyYXlMaWtlIiwiY3JlYXRlTWV0aG9kIiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwiTyIsImxlbmd0aCIsImluZGV4IiwiaW5jbHVkZXMiLCJpbmRleE9mIiwiYmluZCIsInVuY3VycnlUaGlzIiwiSW5kZXhlZE9iamVjdCIsInRvT2JqZWN0IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwicHVzaCIsIlRZUEUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiSVNfRklMVEVSX1JFSkVDVCIsIk5PX0hPTEVTIiwiY2FsbGJhY2tmbiIsInRoYXQiLCJzcGVjaWZpY0NyZWF0ZSIsInJlc3VsdCIsInNlbGYiLCJib3VuZEZ1bmN0aW9uIiwidGFyZ2V0IiwiZm9yRWFjaCIsIm1hcCIsImZpbHRlciIsInNvbWUiLCJldmVyeSIsImZpbmQiLCJmaW5kSW5kZXgiLCJmaWx0ZXJSZWplY3QiLCJjcmVhdGVQcm9wZXJ0eSIsIiRBcnJheSIsIm1heCIsIk1hdGgiLCJzdGFydCIsImVuZCIsImsiLCJmaW4iLCJuIiwic2xpY2UiLCJpc0FycmF5IiwiaXNDb25zdHJ1Y3RvciIsIlNQRUNJRVMiLCJvcmlnaW5hbEFycmF5IiwiQyIsImNvbnN0cnVjdG9yIiwiYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IiLCJ0b1N0cmluZyIsInN0cmluZ1NsaWNlIiwiaXQiLCJUT19TVFJJTkdfVEFHX1NVUFBPUlQiLCJjbGFzc29mUmF3IiwiVE9fU1RSSU5HX1RBRyIsIiRPYmplY3QiLCJPYmplY3QiLCJDT1JSRUNUX0FSR1VNRU5UUyIsImFyZ3VtZW50cyIsInRhZyIsImVycm9yIiwidHJ5R2V0IiwiY2FsbGVlIiwiaGFzT3duIiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwic291cmNlIiwiZXhjZXB0aW9ucyIsImtleXMiLCJmIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaSIsImZhaWxzIiwiRiIsImdldFByb3RvdHlwZU9mIiwiZG9uZSIsIkRFU0NSSVBUT1JTIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0IiwiYml0bWFwIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwidG9Qcm9wZXJ0eUtleSIsInByb3BlcnR5S2V5IiwiYW5PYmplY3QiLCJvcmRpbmFyeVRvUHJpbWl0aXZlIiwiaGludCIsInRoaXMiLCJtYWtlQnVpbHRJbiIsIm5hbWUiLCJkZXNjcmlwdG9yIiwiZ2V0IiwiZ2V0dGVyIiwic2V0Iiwic2V0dGVyIiwiZGVmaW5lR2xvYmFsUHJvcGVydHkiLCJvcHRpb25zIiwic2ltcGxlIiwiZ2xvYmFsIiwidW5zYWZlIiwibm9uQ29uZmlndXJhYmxlIiwibm9uV3JpdGFibGUiLCJkb2N1bWVudEFsbCIsImRvY3VtZW50IiwiYWxsIiwiSVNfSFRNTEREQSIsIkVYSVNUUyIsImNyZWF0ZUVsZW1lbnQiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNsYXNzTGlzdCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIkRPTVRva2VuTGlzdFByb3RvdHlwZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm1hdGNoIiwidmVyc2lvbiIsInByb2Nlc3MiLCJEZW5vIiwidmVyc2lvbnMiLCJ2OCIsInNwbGl0IiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiZGVmaW5lQnVpbHRJbiIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJpc0ZvcmNlZCIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0IiwiZG9udENhbGxHZXRTZXQiLCJmb3JjZWQiLCJzaGFtIiwiZXhlYyIsIk5BVElWRV9CSU5EIiwiRnVuY3Rpb25Qcm90b3R5cGUiLCJGdW5jdGlvbiIsImFwcGx5IiwiY2FsbCIsIlJlZmxlY3QiLCJhQ2FsbGFibGUiLCJmbiIsInRlc3QiLCJoYXNPd25Qcm9wZXJ0eSIsImdldERlc2NyaXB0b3IiLCJQUk9QRVIiLCJDT05GSUdVUkFCTEUiLCJtZXRob2QiLCJ1bmN1cnJ5VGhpc1dpdGhCaW5kIiwibmFtZXNwYWNlIiwiY2xhc3NvZiIsInJlcGxhY2VyIiwicmF3TGVuZ3RoIiwiZWxlbWVudCIsImtleXNMZW5ndGgiLCJyb290IiwiaiIsImlzTnVsbE9yVW5kZWZpbmVkIiwiViIsIlAiLCJmdW5jIiwiY2hlY2siLCJnbG9iYWxUaGlzIiwid2luZG93IiwiZyIsImdldEJ1aWx0SW4iLCJhIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzZXRQcm90b3R5cGVPZiIsImR1bW15IiwiV3JhcHBlciIsIk5ld1RhcmdldCIsIk5ld1RhcmdldFByb3RvdHlwZSIsInN0b3JlIiwiZnVuY3Rpb25Ub1N0cmluZyIsImluc3BlY3RTb3VyY2UiLCJoYXMiLCJOQVRJVkVfV0VBS19NQVAiLCJzaGFyZWQiLCJzaGFyZWRLZXkiLCJoaWRkZW5LZXlzIiwiT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQiLCJXZWFrTWFwIiwic3RhdGUiLCJtZXRhZGF0YSIsImZhY2FkZSIsIlNUQVRFIiwiZW5mb3JjZSIsImdldHRlckZvciIsInR5cGUiLCIkZG9jdW1lbnRBbGwiLCJub29wIiwiZW1wdHkiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvclJlZ0V4cCIsIklOQ09SUkVDVF9UT19TVFJJTkciLCJpc0NvbnN0cnVjdG9yTW9kZXJuIiwiaXNDb25zdHJ1Y3RvckxlZ2FjeSIsImNhbGxlZCIsInJlcGxhY2VtZW50IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsImRhdGEiLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsImlzUHJvdG90eXBlT2YiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIiRTeW1ib2wiLCJJdGVyYXRvclByb3RvdHlwZSIsInNldFRvU3RyaW5nVGFnIiwiSXRlcmF0b3JzIiwicmV0dXJuVGhpcyIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJOQU1FIiwibmV4dCIsIkVOVU1FUkFCTEVfTkVYVCIsIiQiLCJJU19QVVJFIiwiRnVuY3Rpb25OYW1lIiwiY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciIsIkl0ZXJhdG9yc0NvcmUiLCJQUk9QRVJfRlVOQ1RJT05fTkFNRSIsIkNPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FIiwiQlVHR1lfU0FGQVJJX0lURVJBVE9SUyIsIklURVJBVE9SIiwiS0VZUyIsIlZBTFVFUyIsIkVOVFJJRVMiLCJJdGVyYWJsZSIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUiLCJtZXRob2RzIiwiS0VZIiwiZ2V0SXRlcmF0aW9uTWV0aG9kIiwiS0lORCIsImRlZmF1bHRJdGVyYXRvciIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiSU5DT1JSRUNUX1ZBTFVFU19OQU1FIiwibmF0aXZlSXRlcmF0b3IiLCJhbnlOYXRpdmVJdGVyYXRvciIsImVudHJpZXMiLCJ2YWx1ZXMiLCJwcm90byIsIlByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3IiLCJ0b0xlbmd0aCIsIm9iaiIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsImdldEludGVybmFsU3RhdGUiLCJqb2luIiwiQ09ORklHVVJBQkxFX0xFTkdUSCIsIlRFTVBMQVRFIiwiYXJpdHkiLCJjZWlsIiwiZmxvb3IiLCJ0cnVuYyIsIngiLCJhY3RpdmVYRG9jdW1lbnQiLCJkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlIiwiZW51bUJ1Z0tleXMiLCJodG1sIiwiUFJPVE9UWVBFIiwiU0NSSVBUIiwiSUVfUFJPVE8iLCJFbXB0eUNvbnN0cnVjdG9yIiwic2NyaXB0VGFnIiwiY29udGVudCIsIkxUIiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsIndyaXRlIiwiY2xvc2UiLCJ0ZW1wIiwicGFyZW50V2luZG93IiwiTnVsbFByb3RvT2JqZWN0IiwiQWN0aXZlWE9iamVjdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwiSlMiLCJkb21haW4iLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiUHJvcGVydGllcyIsIlY4X1BST1RPVFlQRV9ERUZJTkVfQlVHIiwib2JqZWN0S2V5cyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsIklFOF9ET01fREVGSU5FIiwiJGRlZmluZVByb3BlcnR5IiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkVOVU1FUkFCTEUiLCJXUklUQUJMRSIsIkF0dHJpYnV0ZXMiLCJjdXJyZW50IiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsImFycmF5U2xpY2UiLCJ3aW5kb3dOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImludGVybmFsT2JqZWN0S2V5cyIsImNvbmNhdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsIk9iamVjdFByb3RvdHlwZSIsIm5hbWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCJ1bmN1cnJ5VGhpc0FjY2Vzc29yIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwiQ09SUkVDVF9TRVRURVIiLCJfX3Byb3RvX18iLCJpbnB1dCIsInByZWYiLCJ2YWwiLCJ2YWx1ZU9mIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsIlRBRyIsInVpZCIsIlNIQVJFRCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJsaWNlbnNlIiwidG9JbnRlZ2VyT3JJbmZpbml0eSIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJjaGFyQXQiLCJjaGFyQ29kZUF0IiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJmaXJzdCIsInNlY29uZCIsIlMiLCJwb3NpdGlvbiIsInNpemUiLCJjb2RlQXQiLCJ3aGl0ZXNwYWNlcyIsImx0cmltIiwiUmVnRXhwIiwicnRyaW0iLCJ0cmltIiwiVjhfVkVSU0lPTiIsInN5bWJvbCIsIlN5bWJvbCIsIlN5bWJvbFByb3RvdHlwZSIsIlRPX1BSSU1JVElWRSIsIk5BVElWRV9TWU1CT0wiLCJrZXlGb3IiLCJtaW4iLCJpbnRlZ2VyIiwibnVtYmVyIiwiaXNTeW1ib2wiLCJnZXRNZXRob2QiLCJleG90aWNUb1ByaW0iLCJ0b1ByaW1pdGl2ZSIsImlkIiwicG9zdGZpeCIsInJhbmRvbSIsIml0ZXJhdG9yIiwicGF0aCIsIndyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwiYWRkVG9VbnNjb3BhYmxlcyIsImRlZmluZUl0ZXJhdG9yIiwiY3JlYXRlSXRlclJlc3VsdE9iamVjdCIsIkFSUkFZX0lURVJBVE9SIiwic2V0SW50ZXJuYWxTdGF0ZSIsIml0ZXJhdGVkIiwia2luZCIsIkFyZ3VtZW50cyIsImRhdGVUb1ByaW1pdGl2ZSIsIkRhdGVQcm90b3R5cGUiLCJEYXRlIiwiZ2V0UmVwbGFjZXJGdW5jdGlvbiIsIiRzdHJpbmdpZnkiLCJudW1iZXJUb1N0cmluZyIsInRlc3RlciIsImxvdyIsImhpIiwiV1JPTkdfU1lNQk9MU19DT05WRVJTSU9OIiwiSUxMX0ZPUk1FRF9VTklDT0RFIiwic3RyaW5naWZ5V2l0aFN5bWJvbHNGaXgiLCJhcmdzIiwiJHJlcGxhY2VyIiwiZml4SWxsRm9ybWVkIiwib2Zmc2V0IiwicHJldiIsInN0cmluZ2lmeSIsInNwYWNlIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJ0aGlzTnVtYmVyVmFsdWUiLCJOVU1CRVIiLCJOYXRpdmVOdW1iZXIiLCJQdXJlTnVtYmVyTmFtZXNwYWNlIiwiTnVtYmVyUHJvdG90eXBlIiwiTnVtYmVyV3JhcHBlciIsInByaW1WYWx1ZSIsInRoaXJkIiwicmFkaXgiLCJtYXhDb2RlIiwiZGlnaXRzIiwiY29kZSIsIk5hTiIsInBhcnNlSW50IiwidG9OdW1iZXIiLCJ0b051bWVyaWMiLCJ3cmFwIiwiTnVtYmVyIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIlNUUklOR19JVEVSQVRPUiIsInBvaW50IiwiJHRvU3RyaW5nIiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwiZGVmaW5lQnVpbHRJbkFjY2Vzc29yIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwiZGVmaW5lU3ltYm9sVG9QcmltaXRpdmUiLCIkZm9yRWFjaCIsIkhJRERFTiIsIlNZTUJPTCIsIlFPYmplY3QiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJuYXRpdmVEZWZpbmVQcm9wZXJ0eSIsIm5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMiLCJuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkFsbFN5bWJvbHMiLCJPYmplY3RQcm90b3R5cGVTeW1ib2xzIiwiVVNFX1NFVFRFUiIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2NyaXB0b3IiLCJPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yIiwiZGVzY3JpcHRpb24iLCIkZGVmaW5lUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCJJU19PQkpFQ1RfUFJPVE9UWVBFIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiTmF0aXZlU3ltYm9sIiwiRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlIiwiU3ltYm9sV3JhcHBlciIsInRoaXNTeW1ib2xWYWx1ZSIsInN5bWJvbERlc2NyaXB0aXZlU3RyaW5nIiwicmVnZXhwIiwiZGVzYyIsIk5BVElWRV9TWU1CT0xfUkVHSVNUUlkiLCJTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5IiwiU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSIsInN5bSIsIkRPTUl0ZXJhYmxlcyIsIkFycmF5SXRlcmF0b3JNZXRob2RzIiwiQXJyYXlWYWx1ZXMiLCJoYW5kbGVQcm90b3R5cGUiLCJDb2xsZWN0aW9uUHJvdG90eXBlIiwiQ09MTEVDVElPTl9OQU1FIiwiTUVUSE9EX05BTUUiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwiaXRlbSIsIm5lZWRMYXllciIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIl9fZXNNb2R1bGUiLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJwcm9wIiwibmMiLCJDb2xsYXBzaWJsZSIsIl9jbGFzc0NhbGxDaGVjayIsImNvbnRhaW5lciIsImluc2VydEFkamFjZW50SFRNTCIsImJ0blRleHQiLCJhZGRFdmVudExpc3RlbmVyIiwidGV4dENvbnRlbnQiLCJ3aWRnZXRGb290ZXIiLCJjdXJyZW50VGFyZ2V0IiwidG9nZ2xlIiwiV2lkZ2V0Q2hhdCIsIl90aGlzIiwiY2hhdFdpZGdldENvbnRhaW5lciIsImNoYXRXaWRnZXRCdXR0b24iLCJjaGF0V2lkZ2V0V2luZG93IiwiY2hhdFdpZGdldFdpbmRvd0Nsb3NlQnRuIiwiZXYiLCJhZGQiLCJwcmV2ZW50RGVmYXVsdCIsImNvbGxhcHNlV2lkZ2V0IiwiQ29sbGFwc2UiLCJjaGF0V2lkZ2V0IiwiQ2hhdCIsImluaXQiXSwic291cmNlUm9vdCI6IiJ9